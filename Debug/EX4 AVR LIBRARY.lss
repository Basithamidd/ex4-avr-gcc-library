
EX4 AVR LIBRARY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000d22  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00000dca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165d  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  000025bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000718  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000324  00000000  00000000  00003358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e1  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c80  00000000  00000000  00003c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	25 34       	cpi	r18, 0x45	; 69
  56:	64 00       	.word	0x0064	; ????

00000058 <__c.2290>:
  58:	48 65 6c 6c 6f 20 5e 5f 5e 00                       Hello ^_^.

00000062 <LcdCustomChar>:
  62:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  72:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  82:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  92:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf e5       	ldi	r28, 0x5F	; 95
  a8:	d8 e0       	ldi	r29, 0x08	; 8
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	a0 e6       	ldi	r26, 0x60	; 96
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e2 e2       	ldi	r30, 0x22	; 34
  b6:	fd e0       	ldi	r31, 0x0D	; 13
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 37       	cpi	r26, 0x74	; 116
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	a4 e7       	ldi	r26, 0x74	; 116
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a8 37       	cpi	r26, 0x78	; 120
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  d8:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <main>:
int main(void)
{
	//var
	lcd_t lcd1 = lcd_struct_default;
	//adc_t adc1 = adc_struct_default;
	adc_t *adc1 = new_adc(ADC_VREF_AVCC, ADC_DATA_10BIT, ADC_PSC128);
  e0:	47 e0       	ldi	r20, 0x07	; 7
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <new_adc>
  ea:	6c 01       	movw	r12, r24
	uint16_t x0=0;
	
	lcd1.initialize();
  ec:	0e 94 95 01 	call	0x32a	; 0x32a <LCDinit>
	lcd1.flash_text((const uint8_t*)PSTR("Hello ^_^"), 0, 0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	88 e5       	ldi	r24, 0x58	; 88
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <CopyStringtoLCD>
	//main loop
	for (;;)
	{
		//x0 = adc1.read(ADC_CH0);
		x0 = adc1->read(ADC_CH0);
		lcd1.printf(LCD_USE_FLASH, 9,0,PSTR("%4d"),x0);
  fc:	0f 2e       	mov	r0, r31
  fe:	f4 e5       	ldi	r31, 0x54	; 84
 100:	ef 2e       	mov	r14, r31
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
 108:	0f 2e       	mov	r0, r31
 10a:	f9 e0       	ldi	r31, 0x09	; 9
 10c:	bf 2e       	mov	r11, r31
 10e:	f0 2d       	mov	r31, r0
 110:	11 e0       	ldi	r17, 0x01	; 1
	
	//main loop
	for (;;)
	{
		//x0 = adc1.read(ADC_CH0);
		x0 = adc1->read(ADC_CH0);
 112:	d6 01       	movw	r26, r12
 114:	12 96       	adiw	r26, 0x02	; 2
 116:	ed 91       	ld	r30, X+
 118:	fc 91       	ld	r31, X
 11a:	13 97       	sbiw	r26, 0x03	; 3
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	09 95       	icall
 120:	ec 01       	movw	r28, r24
		lcd1.printf(LCD_USE_FLASH, 9,0,PSTR("%4d"),x0);
 122:	df 93       	push	r29
 124:	8f 93       	push	r24
 126:	ff 92       	push	r15
 128:	ef 92       	push	r14
 12a:	1f 92       	push	r1
 12c:	bf 92       	push	r11
 12e:	1f 93       	push	r17
 130:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCDprintf>
		lcd1.progress_bar(0,1,x0>>2,255,16);
 134:	ae 01       	movw	r20, r28
 136:	56 95       	lsr	r21
 138:	47 95       	ror	r20
 13a:	56 95       	lsr	r21
 13c:	47 95       	ror	r20
 13e:	00 e1       	ldi	r16, 0x10	; 16
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	61 2f       	mov	r22, r17
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCDprogressBar>
 14a:	ad b7       	in	r26, 0x3d	; 61
 14c:	be b7       	in	r27, 0x3e	; 62
 14e:	17 96       	adiw	r26, 0x07	; 7
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	be bf       	out	0x3e, r27	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	ad bf       	out	0x3d, r26	; 61
 15a:	db cf       	rjmp	.-74     	; 0x112 <main+0x32>

0000015c <ADC_Init>:
/*
set vref
*/
static void ADC_SetVref(const uint8_t aVrefMode)
{
	ADMUX =(ADMUX & ~(_BV(REFS1) | _BV(REFS0))) | (aVrefMode<<REFS0);
 15c:	27 b1       	in	r18, 0x07	; 7
 15e:	30 e4       	ldi	r19, 0x40	; 64
 160:	83 9f       	mul	r24, r19
 162:	c0 01       	movw	r24, r0
 164:	11 24       	eor	r1, r1
 166:	2f 73       	andi	r18, 0x3F	; 63
 168:	82 2b       	or	r24, r18
 16a:	87 b9       	out	0x07, r24	; 7
	ADMUX = (ADMUX & ~(_BV(ADLAR))) | (aDataBit<<ADLAR);
}

static void ADC_SetChannel(const uint8_t aChannel)
{
	ADMUX = (ADMUX & 0b11100000) | aChannel;
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	80 7e       	andi	r24, 0xE0	; 224
 170:	87 b9       	out	0x07, r24	; 7
	ADMUX =(ADMUX & ~(_BV(REFS1) | _BV(REFS0))) | (aVrefMode<<REFS0);
}

static void ADC_SetDataBit(const uint8_t aDataBit)
{
	ADMUX = (ADMUX & ~(_BV(ADLAR))) | (aDataBit<<ADLAR);
 172:	87 b1       	in	r24, 0x07	; 7
 174:	90 e2       	ldi	r25, 0x20	; 32
 176:	69 9f       	mul	r22, r25
 178:	b0 01       	movw	r22, r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	68 2b       	or	r22, r24
 180:	67 b9       	out	0x07, r22	; 7
	ADCSRA = (ADCSRA & ~(_BV(ADEN))) | (isON<<ADEN);
}

static void ADC_SetPrescalar(const uint8_t Psc)
{
	ADCSRA =(ADCSRA & 0b11111000) | Psc;
 182:	86 b1       	in	r24, 0x06	; 6
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	48 2b       	or	r20, r24
 188:	46 b9       	out	0x06, r20	; 6
}

static void ADC_StartSingleConversion()
{
	ADCSRA =(ADCSRA & ~(_BV(ADSC))) | _BV(ADSC);
 18a:	36 9a       	sbi	0x06, 6	; 6
	ADMUX = (ADMUX & 0b11100000) | aChannel;
}

static void ADC_ONOFF(const uint8_t isON)
{
	ADCSRA = (ADCSRA & ~(_BV(ADEN))) | (isON<<ADEN);
 18c:	37 9a       	sbi	0x06, 7	; 6
 18e:	08 95       	ret

00000190 <ADC_ReadData>:
	ADMUX = (ADMUX & ~(_BV(ADLAR))) | (aDataBit<<ADLAR);
}

static void ADC_SetChannel(const uint8_t aChannel)
{
	ADMUX = (ADMUX & 0b11100000) | aChannel;
 190:	97 b1       	in	r25, 0x07	; 7
 192:	90 7e       	andi	r25, 0xE0	; 224
 194:	89 2b       	or	r24, r25
 196:	87 b9       	out	0x07, r24	; 7
	ADCSRA =(ADCSRA & 0b11111000) | Psc;
}

static void ADC_StartSingleConversion()
{
	ADCSRA =(ADCSRA & ~(_BV(ADSC))) | _BV(ADSC);
 198:	36 9a       	sbi	0x06, 6	; 6
}

static void ADC_WaitConversionComplete()
{
	loop_until_bit_is_set(ADCSRA,ADIF);
 19a:	34 9b       	sbis	0x06, 4	; 6
 19c:	fe cf       	rjmp	.-4      	; 0x19a <ADC_ReadData+0xa>
}

static void ADC_ClearFlagComplete()
{
	ADCSRA |= _BV(ADIF);
 19e:	34 9a       	sbi	0x06, 4	; 6
	ADC_SetChannel(aChannel);
	ADC_StartSingleConversion();
	ADC_WaitConversionComplete();
	ADC_ClearFlagComplete();
	
	if (bit_is_set(ADMUX,ADLAR))	//8bit
 1a0:	3d 9b       	sbis	0x07, 5	; 7
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <ADC_ReadData+0x1a>
	{
		return ADCH;
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret
	}
	else
	{
		return ADC;
 1aa:	84 b1       	in	r24, 0x04	; 4
 1ac:	95 b1       	in	r25, 0x05	; 5
	}
}
 1ae:	08 95       	ret

000001b0 <new_adc>:

adc_t *new_adc(const uint8_t Vref, const uint8_t DataBit, const uint8_t Psc)
{
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	18 2f       	mov	r17, r24
 1bc:	06 2f       	mov	r16, r22
 1be:	f4 2e       	mov	r15, r20
	//assign it
	adc_t *adcx = (adc_t *) malloc(sizeof(adc_t));
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 aa 02 	call	0x554	; 0x554 <malloc>
 1c8:	ec 01       	movw	r28, r24
	
	if (adcx == NULL)
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <new_adc+0x38>
	{
		return NULL;
	}
	
	adcx->init = ADC_Init;
 1ce:	2e ea       	ldi	r18, 0xAE	; 174
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	39 83       	std	Y+1, r19	; 0x01
 1d4:	28 83       	st	Y, r18
	adcx->read = ADC_ReadData;
 1d6:	28 ec       	ldi	r18, 0xC8	; 200
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	3b 83       	std	Y+3, r19	; 0x03
 1dc:	2a 83       	std	Y+2, r18	; 0x02
	
	//init it
	adcx->init(Vref,DataBit,Psc);
 1de:	4f 2d       	mov	r20, r15
 1e0:	60 2f       	mov	r22, r16
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 ae 00 	call	0x15c	; 0x15c <ADC_Init>
	
	//return it
	return adcx;
}
 1e8:	ce 01       	movw	r24, r28
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	08 95       	ret

000001f6 <LCDtoggleEn>:
}

//toggle en
static void LCDtoggleEn()
{
	LCD_PORT |= _BV(LCD_EN);//high
 1f6:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDtoggleEn+0x4>
	_delay_us(LCD_EN_DELAY);
	LCD_PORT &= ~(_BV(LCD_EN));	//low
 1fe:	c2 98       	cbi	0x18, 2	; 24
 200:	08 95       	ret

00000202 <LCDwaitUntilNotBusy>:
{
	#if (USE_BUSY_FLAG == 1)
	uint8_t bfst=255;
	
	//make 4-7 as input
	LCD_DDR = 0x0f;
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	87 bb       	out	0x17, r24	; 23
	LCD_PORT &= ~(_BV(LCD_RS) | _BV(LCD_EN));	//rs=en=0
 206:	88 b3       	in	r24, 0x18	; 24
 208:	8a 7f       	andi	r24, 0xFA	; 250
 20a:	88 bb       	out	0x18, r24	; 24
	LCD_PORT |= _BV(LCD_RW) | 0xf0;	//rw=1, pullup on
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	82 6f       	ori	r24, 0xF2	; 242
 210:	88 bb       	out	0x18, r24	; 24
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <LCDwaitUntilNotBusy+0x12>
	_delay_us(LCD_EN_DELAY);
	
	//check busy flag
	do
	{
		LCD_PORT |= _BV(LCD_EN);//high
 218:	c2 9a       	sbi	0x18, 2	; 24
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDwaitUntilNotBusy+0x1a>
		_delay_us(LCD_EN_DELAY);
		bfst = LCD_PIN;	//ambil bf dr nibble tggi
 220:	86 b3       	in	r24, 0x16	; 22
		LCD_PORT &= ~(_BV(LCD_EN));	//low
 222:	c2 98       	cbi	0x18, 2	; 24
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	9a 95       	dec	r25
 228:	f1 f7       	brne	.-4      	; 0x226 <LCDwaitUntilNotBusy+0x24>
		_delay_us(LCD_EN_DELAY);
		
		LCD_PORT |= _BV(LCD_EN);//high
 22a:	c2 9a       	sbi	0x18, 2	; 24
 22c:	94 e0       	ldi	r25, 0x04	; 4
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <LCDwaitUntilNotBusy+0x2c>
		_delay_us(LCD_EN_DELAY);
		LCD_PORT &= ~(_BV(LCD_EN));	//low
 232:	c2 98       	cbi	0x18, 2	; 24
 234:	94 e0       	ldi	r25, 0x04	; 4
 236:	9a 95       	dec	r25
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDwaitUntilNotBusy+0x34>
		_delay_us(LCD_EN_DELAY);
	} while ((bfst & 0x80) == 0x80);	//loop sampe tdk busy
 23a:	88 23       	and	r24, r24
 23c:	6c f3       	brlt	.-38     	; 0x218 <LCDwaitUntilNotBusy+0x16>
	
	//restore as output
	LCD_PORT = 0;
 23e:	18 ba       	out	0x18, r1	; 24
	LCD_DDR = 0xff;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	87 bb       	out	0x17, r24	; 23
 244:	08 95       	ret

00000246 <LCDsendCommand>:
	#endif
}

//send command to lcd
void LCDsendCommand(const uint8_t aCmd)
{
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	LCDwaitUntilNotBusy();
 24a:	0e 94 01 01 	call	0x202	; 0x202 <LCDwaitUntilNotBusy>
	LCD_PORT = (aCmd & 0xF0);	//send hi byte
 24e:	8c 2f       	mov	r24, r28
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 254:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
	LCD_PORT = ((aCmd & 0x0F)<<4);	//send lo byte
 258:	20 e1       	ldi	r18, 0x10	; 16
 25a:	c2 9f       	mul	r28, r18
 25c:	c0 01       	movw	r24, r0
 25e:	11 24       	eor	r1, r1
 260:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
	//_delay_us(LCD_DELAY_CMD);	//write delay
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LCDsendChar>:

void LCDsendChar(const uint8_t aData)
{
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
	LCDwaitUntilNotBusy();
 26e:	0e 94 01 01 	call	0x202	; 0x202 <LCDwaitUntilNotBusy>
	LCD_PORT = (aData & 0xF0) | _BV(LCD_RS);	//send hi byte
 272:	8c 2f       	mov	r24, r28
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	81 60       	ori	r24, 0x01	; 1
 278:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 27a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
	LCD_PORT = ((aData & 0x0F)<<4) | _BV(LCD_RS);	//send lo byte
 27e:	20 e1       	ldi	r18, 0x10	; 16
 280:	c2 9f       	mul	r28, r18
 282:	c0 01       	movw	r24, r0
 284:	11 24       	eor	r1, r1
 286:	81 60       	ori	r24, 0x01	; 1
 288:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 28a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
	//_delay_us(LCD_DELAY_WRITE_DATA);	//write delay
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDsendCharStream>:
}

//send lcd data from stream version
static int LCDsendCharStream(char ch, FILE *stream)
{
	LCDsendChar((uint8_t) ch);
 292:	0e 94 35 01 	call	0x26a	; 0x26a <LCDsendChar>
	return 0;
}
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret

0000029c <LCDGotoXY>:
//Cursor to X Y position
void LCDGotoXY(const uint8_t x, const uint8_t y)
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 29c:	62 30       	cpi	r22, 0x02	; 2
 29e:	31 f0       	breq	.+12     	; 0x2ac <LCDGotoXY+0x10>
 2a0:	63 30       	cpi	r22, 0x03	; 3
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <LCDGotoXY+0x14>
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <LCDGotoXY+0x16>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 2a8:	80 5c       	subi	r24, 0xC0	; 192
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <LCDGotoXY+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 2ac:	8c 5e       	subi	r24, 0xEC	; 236
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <LCDGotoXY+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 2b0:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(_BV(LCD_DDRAM) | DDRAMAddr);
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
 2b8:	08 95       	ret

000002ba <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,const uint8_t char_code){
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2c8:	66 0f       	add	r22, r22
 2ca:	66 0f       	add	r22, r22
 2cc:	66 0f       	add	r22, r22
 2ce:	60 64       	ori	r22, 0x40	; 64
 2d0:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	f8 01       	movw	r30, r16
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
 2dc:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
 2de:	8c 2f       	mov	r24, r28
 2e0:	8e 0d       	add	r24, r14
 2e2:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
		LCDsendChar(pcc);
 2e6:	8f 2d       	mov	r24, r15
 2e8:	0e 94 35 01 	call	0x26a	; 0x26a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,const uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2ec:	21 96       	adiw	r28, 0x01	; 1
 2ee:	c8 30       	cpi	r28, 0x08	; 8
 2f0:	d1 05       	cpc	r29, r1
 2f2:	89 f7       	brne	.-30     	; 0x2d6 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	08 95       	ret

00000302 <LCDDefineProgressBarChar>:
	LCDDefineProgressBarChar();
}

//init 8 custom char
void LCDDefineProgressBarChar()
{
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	c2 e6       	ldi	r28, 0x62	; 98
 30a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ch=0, chn=0;
 30c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<48)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 30e:	11 e0       	ldi	r17, 0x01	; 1
 310:	16 0f       	add	r17, r22
 312:	ce 01       	movw	r24, r28
 314:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDdefinechar>
 318:	28 96       	adiw	r28, 0x08	; 8

//init 8 custom char
void LCDDefineProgressBarChar()
{
	uint8_t ch=0, chn=0;
	while(ch<48)
 31a:	16 30       	cpi	r17, 0x06	; 6
 31c:	11 f0       	breq	.+4      	; 0x322 <LCDDefineProgressBarChar+0x20>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 31e:	61 2f       	mov	r22, r17
 320:	f6 cf       	rjmp	.-20     	; 0x30e <LCDDefineProgressBarChar+0xc>
		ch=ch+8;
	}
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	08 95       	ret

0000032a <LCDinit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	8f ea       	ldi	r24, 0xAF	; 175
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <LCDinit+0x6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCDinit+0x10>
 33a:	00 00       	nop
//lcd init
void LCDinit()
{
	//init lcd
	_delay_ms(50);
	LCD_DDR=255;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	87 bb       	out	0x17, r24	; 23
	LCD_PORT=0x30;	//DB4 = DB5 = 1, RS = RW = 0
 340:	80 e3       	ldi	r24, 0x30	; 48
 342:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 344:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9b e6       	ldi	r25, 0x6B	; 107
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCDinit+0x22>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCDinit+0x28>
 352:	00 00       	nop
	_delay_ms(10);
	
	LCD_PORT=0x30;	//DB4 = DB5 = 1, RS = RW = 0
 354:	80 e3       	ldi	r24, 0x30	; 48
 356:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 358:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	95 e3       	ldi	r25, 0x35	; 53
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <LCDinit+0x36>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCDinit+0x3c>
 366:	00 00       	nop
	_delay_ms(5);
	
	LCD_PORT=0x30;	//DB4 = DB5 = 1, RS = RW = 0
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 36c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	95 e3       	ldi	r25, 0x35	; 53
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCDinit+0x4a>
 378:	00 c0       	rjmp	.+0      	; 0x37a <LCDinit+0x50>
 37a:	00 00       	nop
	_delay_ms(5);
	
	LCD_PORT=0x20;	//DB5 = 1, RS = RW = 0
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	88 bb       	out	0x18, r24	; 24
	LCDtoggleEn();
 380:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDtoggleEn>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	95 e3       	ldi	r25, 0x35	; 53
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCDinit+0x5e>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCDinit+0x64>
 38e:	00 00       	nop
	_delay_ms(5);
	
	//set setting
	LCDsendCommand(0x28);	//4bit 2line 5x7font
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
	LCDsendCommand(0x0c);	//display on cursor off
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
	LCDsendCommand(0x06);	//auto inc display shift off
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
	LCDsendCommand(0x80);	//cursor home
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	0e 94 23 01 	call	0x246	; 0x246 <LCDsendCommand>
	
	//init 8 custom chars
	LCDDefineProgressBarChar();
 3a8:	0e 94 81 01 	call	0x302	; 0x302 <LCDDefineProgressBarChar>
 3ac:	08 95       	ret

000003ae <CopyStringtoLCD>:

//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);
void CopyStringtoLCD(const uint8_t *FlashLoc, const uint8_t x, const uint8_t y)
{
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
 3b6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 3b8:	64 2f       	mov	r22, r20
 3ba:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 3be:	9e 01       	movw	r18, r28
 3c0:	fe 01       	movw	r30, r28
 3c2:	84 91       	lpm	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	69 f0       	breq	.+26     	; 0x3e2 <CopyStringtoLCD+0x34>
 3c8:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 3ca:	f9 01       	movw	r30, r18
 3cc:	84 91       	lpm	r24, Z
 3ce:	0e 94 35 01 	call	0x26a	; 0x26a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);
void CopyStringtoLCD(const uint8_t *FlashLoc, const uint8_t x, const uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 3d2:	1f 5f       	subi	r17, 0xFF	; 255
 3d4:	9e 01       	movw	r18, r28
 3d6:	21 0f       	add	r18, r17
 3d8:	31 1d       	adc	r19, r1
 3da:	f9 01       	movw	r30, r18
 3dc:	84 91       	lpm	r24, Z
 3de:	81 11       	cpse	r24, r1
 3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <CopyStringtoLCD+0x1c>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	08 95       	ret

000003ea <LCDprogressBar>:
	}
}

//adapted fro mAVRLIB
void LCDprogressBar(const uint8_t x, const uint8_t y, const uint8_t progress, const uint8_t maxprogress, const uint8_t length)
{
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	d4 2f       	mov	r29, r20
 3fe:	c2 2f       	mov	r28, r18
	uint8_t i;
	uint16_t pixelprogress;
	uint8_t c;
	
	LCDGotoXY(x,y);
 400:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDGotoXY>
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 404:	80 2f       	mov	r24, r16
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	8e 0f       	add	r24, r30
 410:	9f 1f       	adc	r25, r31
 412:	fc 01       	movw	r30, r24
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	de 9f       	mul	r29, r30
 41a:	c0 01       	movw	r24, r0
 41c:	df 9f       	mul	r29, r31
 41e:	90 0d       	add	r25, r0
 420:	11 24       	eor	r1, r1
 422:	6c 2f       	mov	r22, r28
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__divmodhi4>
 42a:	e6 2f       	mov	r30, r22
 42c:	e6 2e       	mov	r14, r22
 42e:	f7 2e       	mov	r15, r23
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 430:	00 23       	and	r16, r16
 432:	71 f1       	breq	.+92     	; 0x490 <LCDprogressBar+0xa6>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 434:	26 2f       	mov	r18, r22
 436:	37 2f       	mov	r19, r23
 438:	ab ea       	ldi	r26, 0xAB	; 171
 43a:	ba ea       	ldi	r27, 0xAA	; 170
 43c:	0e 94 87 02 	call	0x50e	; 0x50e <__umulhisi3>
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	ac 01       	movw	r20, r24
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	84 0f       	add	r24, r20
 450:	95 1f       	adc	r25, r21
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	c0 e0       	ldi	r28, 0x00	; 0
 458:	d0 e0       	ldi	r29, 0x00	; 0
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 45a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		else
		{
			// this is a full block
			c = 5;
 45c:	0f 2e       	mov	r0, r31
 45e:	f5 e0       	ldi	r31, 0x05	; 5
 460:	df 2e       	mov	r13, r31
 462:	f0 2d       	mov	r31, r0
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 464:	be 2e       	mov	r11, r30
 466:	b8 1a       	sub	r11, r24
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
 468:	c1 2c       	mov	r12, r1
 46a:	ce 01       	movw	r24, r28
 46c:	05 96       	adiw	r24, 0x05	; 5
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 46e:	e8 16       	cp	r14, r24
 470:	f9 06       	cpc	r15, r25
 472:	28 f4       	brcc	.+10     	; 0x47e <LCDprogressBar+0x94>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 474:	ec 16       	cp	r14, r28
 476:	fd 06       	cpc	r15, r29
 478:	20 f4       	brcc	.+8      	; 0x482 <LCDprogressBar+0x98>
			{
				// this is an empty block
				// use space character?
				c = 0;
 47a:	8c 2d       	mov	r24, r12
 47c:	03 c0       	rjmp	.+6      	; 0x484 <LCDprogressBar+0x9a>
			}
		}
		else
		{
			// this is a full block
			c = 5;
 47e:	8d 2d       	mov	r24, r13
 480:	01 c0       	rjmp	.+2      	; 0x484 <LCDprogressBar+0x9a>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 482:	8b 2d       	mov	r24, r11
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 484:	0e 94 35 01 	call	0x26a	; 0x26a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 488:	1f 5f       	subi	r17, 0xFF	; 255
 48a:	26 96       	adiw	r28, 0x06	; 6
 48c:	10 13       	cpse	r17, r16
 48e:	ed cf       	rjmp	.-38     	; 0x46a <LCDprogressBar+0x80>
		
		// write character to display
		LCDsendChar(c);
	}

}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	08 95       	ret

000004a4 <LCDprintf>:
	return 0;
}

//printf for the lcd
void LCDprintf(const uint8_t use_flash, const uint8_t xpos, const uint8_t ypos, const char *fmt, ...)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	va_list arglist;
	
	LCDGotoXY(xpos,ypos);
 4ac:	6f 81       	ldd	r22, Y+7	; 0x07
 4ae:	8e 81       	ldd	r24, Y+6	; 0x06
 4b0:	0e 94 4e 01 	call	0x29c	; 0x29c <LCDGotoXY>
	
	va_start(arglist,fmt);
	if (use_flash)
 4b4:	8d 81       	ldd	r24, Y+5	; 0x05
 4b6:	88 23       	and	r24, r24
 4b8:	51 f0       	breq	.+20     	; 0x4ce <LCDprintf+0x2a>
	{
		vfprintf_P(&LCDInputOutputStream,fmt,arglist);
 4ba:	ae 01       	movw	r20, r28
 4bc:	46 5f       	subi	r20, 0xF6	; 246
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	68 85       	ldd	r22, Y+8	; 0x08
 4c2:	79 85       	ldd	r23, Y+9	; 0x09
 4c4:	86 e6       	ldi	r24, 0x66	; 102
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vfprintf_P>
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <LCDprintf+0x3c>
	} 
	else
	{
		vfprintf(&LCDInputOutputStream,fmt,arglist);
 4ce:	ae 01       	movw	r20, r28
 4d0:	46 5f       	subi	r20, 0xF6	; 246
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	68 85       	ldd	r22, Y+8	; 0x08
 4d6:	79 85       	ldd	r23, Y+9	; 0x09
 4d8:	86 e6       	ldi	r24, 0x66	; 102
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vfprintf>
	}
	
	va_end(arglist);
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <__divmodhi4>:
 4e6:	97 fb       	bst	r25, 7
 4e8:	07 2e       	mov	r0, r23
 4ea:	16 f4       	brtc	.+4      	; 0x4f0 <__divmodhi4+0xa>
 4ec:	00 94       	com	r0
 4ee:	07 d0       	rcall	.+14     	; 0x4fe <__divmodhi4_neg1>
 4f0:	77 fd       	sbrc	r23, 7
 4f2:	09 d0       	rcall	.+18     	; 0x506 <__divmodhi4_neg2>
 4f4:	0e 94 96 02 	call	0x52c	; 0x52c <__udivmodhi4>
 4f8:	07 fc       	sbrc	r0, 7
 4fa:	05 d0       	rcall	.+10     	; 0x506 <__divmodhi4_neg2>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__divmodhi4_exit>

000004fe <__divmodhi4_neg1>:
 4fe:	90 95       	com	r25
 500:	81 95       	neg	r24
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__divmodhi4_neg2>:
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255

0000050c <__divmodhi4_exit>:
 50c:	08 95       	ret

0000050e <__umulhisi3>:
 50e:	a2 9f       	mul	r26, r18
 510:	b0 01       	movw	r22, r0
 512:	b3 9f       	mul	r27, r19
 514:	c0 01       	movw	r24, r0
 516:	a3 9f       	mul	r26, r19
 518:	70 0d       	add	r23, r0
 51a:	81 1d       	adc	r24, r1
 51c:	11 24       	eor	r1, r1
 51e:	91 1d       	adc	r25, r1
 520:	b2 9f       	mul	r27, r18
 522:	70 0d       	add	r23, r0
 524:	81 1d       	adc	r24, r1
 526:	11 24       	eor	r1, r1
 528:	91 1d       	adc	r25, r1
 52a:	08 95       	ret

0000052c <__udivmodhi4>:
 52c:	aa 1b       	sub	r26, r26
 52e:	bb 1b       	sub	r27, r27
 530:	51 e1       	ldi	r21, 0x11	; 17
 532:	07 c0       	rjmp	.+14     	; 0x542 <__udivmodhi4_ep>

00000534 <__udivmodhi4_loop>:
 534:	aa 1f       	adc	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	a6 17       	cp	r26, r22
 53a:	b7 07       	cpc	r27, r23
 53c:	10 f0       	brcs	.+4      	; 0x542 <__udivmodhi4_ep>
 53e:	a6 1b       	sub	r26, r22
 540:	b7 0b       	sbc	r27, r23

00000542 <__udivmodhi4_ep>:
 542:	88 1f       	adc	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	5a 95       	dec	r21
 548:	a9 f7       	brne	.-22     	; 0x534 <__udivmodhi4_loop>
 54a:	80 95       	com	r24
 54c:	90 95       	com	r25
 54e:	bc 01       	movw	r22, r24
 550:	cd 01       	movw	r24, r26
 552:	08 95       	ret

00000554 <malloc>:
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	91 05       	cpc	r25, r1
 55c:	10 f4       	brcc	.+4      	; 0x562 <malloc+0xe>
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	e0 91 76 00 	lds	r30, 0x0076
 566:	f0 91 77 00 	lds	r31, 0x0077
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	30 97       	sbiw	r30, 0x00	; 0
 574:	39 f1       	breq	.+78     	; 0x5c4 <malloc+0x70>
 576:	40 81       	ld	r20, Z
 578:	51 81       	ldd	r21, Z+1	; 0x01
 57a:	48 17       	cp	r20, r24
 57c:	59 07       	cpc	r21, r25
 57e:	b8 f0       	brcs	.+46     	; 0x5ae <malloc+0x5a>
 580:	48 17       	cp	r20, r24
 582:	59 07       	cpc	r21, r25
 584:	71 f4       	brne	.+28     	; 0x5a2 <malloc+0x4e>
 586:	82 81       	ldd	r24, Z+2	; 0x02
 588:	93 81       	ldd	r25, Z+3	; 0x03
 58a:	10 97       	sbiw	r26, 0x00	; 0
 58c:	29 f0       	breq	.+10     	; 0x598 <malloc+0x44>
 58e:	13 96       	adiw	r26, 0x03	; 3
 590:	9c 93       	st	X, r25
 592:	8e 93       	st	-X, r24
 594:	12 97       	sbiw	r26, 0x02	; 2
 596:	2c c0       	rjmp	.+88     	; 0x5f0 <malloc+0x9c>
 598:	90 93 77 00 	sts	0x0077, r25
 59c:	80 93 76 00 	sts	0x0076, r24
 5a0:	27 c0       	rjmp	.+78     	; 0x5f0 <malloc+0x9c>
 5a2:	21 15       	cp	r18, r1
 5a4:	31 05       	cpc	r19, r1
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <malloc+0x60>
 5a8:	42 17       	cp	r20, r18
 5aa:	53 07       	cpc	r21, r19
 5ac:	18 f0       	brcs	.+6      	; 0x5b4 <malloc+0x60>
 5ae:	a9 01       	movw	r20, r18
 5b0:	db 01       	movw	r26, r22
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <malloc+0x62>
 5b4:	ef 01       	movw	r28, r30
 5b6:	9a 01       	movw	r18, r20
 5b8:	bd 01       	movw	r22, r26
 5ba:	df 01       	movw	r26, r30
 5bc:	02 80       	ldd	r0, Z+2	; 0x02
 5be:	f3 81       	ldd	r31, Z+3	; 0x03
 5c0:	e0 2d       	mov	r30, r0
 5c2:	d7 cf       	rjmp	.-82     	; 0x572 <malloc+0x1e>
 5c4:	21 15       	cp	r18, r1
 5c6:	31 05       	cpc	r19, r1
 5c8:	f9 f0       	breq	.+62     	; 0x608 <malloc+0xb4>
 5ca:	28 1b       	sub	r18, r24
 5cc:	39 0b       	sbc	r19, r25
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	80 f4       	brcc	.+32     	; 0x5f4 <malloc+0xa0>
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	9b 81       	ldd	r25, Y+3	; 0x03
 5d8:	61 15       	cp	r22, r1
 5da:	71 05       	cpc	r23, r1
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <malloc+0x92>
 5de:	fb 01       	movw	r30, r22
 5e0:	93 83       	std	Z+3, r25	; 0x03
 5e2:	82 83       	std	Z+2, r24	; 0x02
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <malloc+0x9a>
 5e6:	90 93 77 00 	sts	0x0077, r25
 5ea:	80 93 76 00 	sts	0x0076, r24
 5ee:	fe 01       	movw	r30, r28
 5f0:	32 96       	adiw	r30, 0x02	; 2
 5f2:	44 c0       	rjmp	.+136    	; 0x67c <malloc+0x128>
 5f4:	fe 01       	movw	r30, r28
 5f6:	e2 0f       	add	r30, r18
 5f8:	f3 1f       	adc	r31, r19
 5fa:	81 93       	st	Z+, r24
 5fc:	91 93       	st	Z+, r25
 5fe:	22 50       	subi	r18, 0x02	; 2
 600:	31 09       	sbc	r19, r1
 602:	39 83       	std	Y+1, r19	; 0x01
 604:	28 83       	st	Y, r18
 606:	3a c0       	rjmp	.+116    	; 0x67c <malloc+0x128>
 608:	20 91 74 00 	lds	r18, 0x0074
 60c:	30 91 75 00 	lds	r19, 0x0075
 610:	23 2b       	or	r18, r19
 612:	41 f4       	brne	.+16     	; 0x624 <malloc+0xd0>
 614:	20 91 62 00 	lds	r18, 0x0062
 618:	30 91 63 00 	lds	r19, 0x0063
 61c:	30 93 75 00 	sts	0x0075, r19
 620:	20 93 74 00 	sts	0x0074, r18
 624:	20 91 60 00 	lds	r18, 0x0060
 628:	30 91 61 00 	lds	r19, 0x0061
 62c:	21 15       	cp	r18, r1
 62e:	31 05       	cpc	r19, r1
 630:	41 f4       	brne	.+16     	; 0x642 <malloc+0xee>
 632:	2d b7       	in	r18, 0x3d	; 61
 634:	3e b7       	in	r19, 0x3e	; 62
 636:	40 91 64 00 	lds	r20, 0x0064
 63a:	50 91 65 00 	lds	r21, 0x0065
 63e:	24 1b       	sub	r18, r20
 640:	35 0b       	sbc	r19, r21
 642:	e0 91 74 00 	lds	r30, 0x0074
 646:	f0 91 75 00 	lds	r31, 0x0075
 64a:	e2 17       	cp	r30, r18
 64c:	f3 07       	cpc	r31, r19
 64e:	a0 f4       	brcc	.+40     	; 0x678 <malloc+0x124>
 650:	2e 1b       	sub	r18, r30
 652:	3f 0b       	sbc	r19, r31
 654:	28 17       	cp	r18, r24
 656:	39 07       	cpc	r19, r25
 658:	78 f0       	brcs	.+30     	; 0x678 <malloc+0x124>
 65a:	ac 01       	movw	r20, r24
 65c:	4e 5f       	subi	r20, 0xFE	; 254
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	24 17       	cp	r18, r20
 662:	35 07       	cpc	r19, r21
 664:	48 f0       	brcs	.+18     	; 0x678 <malloc+0x124>
 666:	4e 0f       	add	r20, r30
 668:	5f 1f       	adc	r21, r31
 66a:	50 93 75 00 	sts	0x0075, r21
 66e:	40 93 74 00 	sts	0x0074, r20
 672:	81 93       	st	Z+, r24
 674:	91 93       	st	Z+, r25
 676:	02 c0       	rjmp	.+4      	; 0x67c <malloc+0x128>
 678:	e0 e0       	ldi	r30, 0x00	; 0
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	cf 01       	movw	r24, r30
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <free>:
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	09 f4       	brne	.+2      	; 0x68e <free+0xa>
 68c:	87 c0       	rjmp	.+270    	; 0x79c <free+0x118>
 68e:	fc 01       	movw	r30, r24
 690:	32 97       	sbiw	r30, 0x02	; 2
 692:	13 82       	std	Z+3, r1	; 0x03
 694:	12 82       	std	Z+2, r1	; 0x02
 696:	c0 91 76 00 	lds	r28, 0x0076
 69a:	d0 91 77 00 	lds	r29, 0x0077
 69e:	20 97       	sbiw	r28, 0x00	; 0
 6a0:	81 f4       	brne	.+32     	; 0x6c2 <free+0x3e>
 6a2:	20 81       	ld	r18, Z
 6a4:	31 81       	ldd	r19, Z+1	; 0x01
 6a6:	28 0f       	add	r18, r24
 6a8:	39 1f       	adc	r19, r25
 6aa:	80 91 74 00 	lds	r24, 0x0074
 6ae:	90 91 75 00 	lds	r25, 0x0075
 6b2:	82 17       	cp	r24, r18
 6b4:	93 07       	cpc	r25, r19
 6b6:	79 f5       	brne	.+94     	; 0x716 <free+0x92>
 6b8:	f0 93 75 00 	sts	0x0075, r31
 6bc:	e0 93 74 00 	sts	0x0074, r30
 6c0:	6d c0       	rjmp	.+218    	; 0x79c <free+0x118>
 6c2:	de 01       	movw	r26, r28
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	ae 17       	cp	r26, r30
 6ca:	bf 07       	cpc	r27, r31
 6cc:	50 f4       	brcc	.+20     	; 0x6e2 <free+0x5e>
 6ce:	12 96       	adiw	r26, 0x02	; 2
 6d0:	4d 91       	ld	r20, X+
 6d2:	5c 91       	ld	r21, X
 6d4:	13 97       	sbiw	r26, 0x03	; 3
 6d6:	9d 01       	movw	r18, r26
 6d8:	41 15       	cp	r20, r1
 6da:	51 05       	cpc	r21, r1
 6dc:	09 f1       	breq	.+66     	; 0x720 <free+0x9c>
 6de:	da 01       	movw	r26, r20
 6e0:	f3 cf       	rjmp	.-26     	; 0x6c8 <free+0x44>
 6e2:	b3 83       	std	Z+3, r27	; 0x03
 6e4:	a2 83       	std	Z+2, r26	; 0x02
 6e6:	40 81       	ld	r20, Z
 6e8:	51 81       	ldd	r21, Z+1	; 0x01
 6ea:	84 0f       	add	r24, r20
 6ec:	95 1f       	adc	r25, r21
 6ee:	8a 17       	cp	r24, r26
 6f0:	9b 07       	cpc	r25, r27
 6f2:	71 f4       	brne	.+28     	; 0x710 <free+0x8c>
 6f4:	8d 91       	ld	r24, X+
 6f6:	9c 91       	ld	r25, X
 6f8:	11 97       	sbiw	r26, 0x01	; 1
 6fa:	84 0f       	add	r24, r20
 6fc:	95 1f       	adc	r25, r21
 6fe:	02 96       	adiw	r24, 0x02	; 2
 700:	91 83       	std	Z+1, r25	; 0x01
 702:	80 83       	st	Z, r24
 704:	12 96       	adiw	r26, 0x02	; 2
 706:	8d 91       	ld	r24, X+
 708:	9c 91       	ld	r25, X
 70a:	13 97       	sbiw	r26, 0x03	; 3
 70c:	93 83       	std	Z+3, r25	; 0x03
 70e:	82 83       	std	Z+2, r24	; 0x02
 710:	21 15       	cp	r18, r1
 712:	31 05       	cpc	r19, r1
 714:	29 f4       	brne	.+10     	; 0x720 <free+0x9c>
 716:	f0 93 77 00 	sts	0x0077, r31
 71a:	e0 93 76 00 	sts	0x0076, r30
 71e:	3e c0       	rjmp	.+124    	; 0x79c <free+0x118>
 720:	d9 01       	movw	r26, r18
 722:	13 96       	adiw	r26, 0x03	; 3
 724:	fc 93       	st	X, r31
 726:	ee 93       	st	-X, r30
 728:	12 97       	sbiw	r26, 0x02	; 2
 72a:	4d 91       	ld	r20, X+
 72c:	5d 91       	ld	r21, X+
 72e:	a4 0f       	add	r26, r20
 730:	b5 1f       	adc	r27, r21
 732:	ea 17       	cp	r30, r26
 734:	fb 07       	cpc	r31, r27
 736:	79 f4       	brne	.+30     	; 0x756 <free+0xd2>
 738:	80 81       	ld	r24, Z
 73a:	91 81       	ldd	r25, Z+1	; 0x01
 73c:	84 0f       	add	r24, r20
 73e:	95 1f       	adc	r25, r21
 740:	02 96       	adiw	r24, 0x02	; 2
 742:	d9 01       	movw	r26, r18
 744:	11 96       	adiw	r26, 0x01	; 1
 746:	9c 93       	st	X, r25
 748:	8e 93       	st	-X, r24
 74a:	82 81       	ldd	r24, Z+2	; 0x02
 74c:	93 81       	ldd	r25, Z+3	; 0x03
 74e:	13 96       	adiw	r26, 0x03	; 3
 750:	9c 93       	st	X, r25
 752:	8e 93       	st	-X, r24
 754:	12 97       	sbiw	r26, 0x02	; 2
 756:	e0 e0       	ldi	r30, 0x00	; 0
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	8a 81       	ldd	r24, Y+2	; 0x02
 75c:	9b 81       	ldd	r25, Y+3	; 0x03
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	19 f0       	breq	.+6      	; 0x768 <free+0xe4>
 762:	fe 01       	movw	r30, r28
 764:	ec 01       	movw	r28, r24
 766:	f9 cf       	rjmp	.-14     	; 0x75a <free+0xd6>
 768:	ce 01       	movw	r24, r28
 76a:	02 96       	adiw	r24, 0x02	; 2
 76c:	28 81       	ld	r18, Y
 76e:	39 81       	ldd	r19, Y+1	; 0x01
 770:	82 0f       	add	r24, r18
 772:	93 1f       	adc	r25, r19
 774:	20 91 74 00 	lds	r18, 0x0074
 778:	30 91 75 00 	lds	r19, 0x0075
 77c:	28 17       	cp	r18, r24
 77e:	39 07       	cpc	r19, r25
 780:	69 f4       	brne	.+26     	; 0x79c <free+0x118>
 782:	30 97       	sbiw	r30, 0x00	; 0
 784:	29 f4       	brne	.+10     	; 0x790 <free+0x10c>
 786:	10 92 77 00 	sts	0x0077, r1
 78a:	10 92 76 00 	sts	0x0076, r1
 78e:	02 c0       	rjmp	.+4      	; 0x794 <free+0x110>
 790:	13 82       	std	Z+3, r1	; 0x03
 792:	12 82       	std	Z+2, r1	; 0x02
 794:	d0 93 75 00 	sts	0x0075, r29
 798:	c0 93 74 00 	sts	0x0074, r28
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <vfprintf_P>:
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	ec 01       	movw	r28, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	88 60       	ori	r24, 0x08	; 8
 7ac:	8b 83       	std	Y+3, r24	; 0x03
 7ae:	ce 01       	movw	r24, r28
 7b0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vfprintf>
 7b4:	2b 81       	ldd	r18, Y+3	; 0x03
 7b6:	27 7f       	andi	r18, 0xF7	; 247
 7b8:	2b 83       	std	Y+3, r18	; 0x03
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <vfprintf>:
 7c0:	ac e0       	ldi	r26, 0x0C	; 12
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	e6 ee       	ldi	r30, 0xE6	; 230
 7c6:	f3 e0       	ldi	r31, 0x03	; 3
 7c8:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__prologue_saves__>
 7cc:	7c 01       	movw	r14, r24
 7ce:	6b 01       	movw	r12, r22
 7d0:	8a 01       	movw	r16, r20
 7d2:	fc 01       	movw	r30, r24
 7d4:	17 82       	std	Z+7, r1	; 0x07
 7d6:	16 82       	std	Z+6, r1	; 0x06
 7d8:	83 81       	ldd	r24, Z+3	; 0x03
 7da:	81 ff       	sbrs	r24, 1
 7dc:	bd c1       	rjmp	.+890    	; 0xb58 <__stack+0x2f9>
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	4c 01       	movw	r8, r24
 7e4:	f7 01       	movw	r30, r14
 7e6:	93 81       	ldd	r25, Z+3	; 0x03
 7e8:	f6 01       	movw	r30, r12
 7ea:	93 fd       	sbrc	r25, 3
 7ec:	85 91       	lpm	r24, Z+
 7ee:	93 ff       	sbrs	r25, 3
 7f0:	81 91       	ld	r24, Z+
 7f2:	6f 01       	movw	r12, r30
 7f4:	88 23       	and	r24, r24
 7f6:	09 f4       	brne	.+2      	; 0x7fa <vfprintf+0x3a>
 7f8:	ab c1       	rjmp	.+854    	; 0xb50 <__stack+0x2f1>
 7fa:	85 32       	cpi	r24, 0x25	; 37
 7fc:	39 f4       	brne	.+14     	; 0x80c <vfprintf+0x4c>
 7fe:	93 fd       	sbrc	r25, 3
 800:	85 91       	lpm	r24, Z+
 802:	93 ff       	sbrs	r25, 3
 804:	81 91       	ld	r24, Z+
 806:	6f 01       	movw	r12, r30
 808:	85 32       	cpi	r24, 0x25	; 37
 80a:	29 f4       	brne	.+10     	; 0x816 <vfprintf+0x56>
 80c:	b7 01       	movw	r22, r14
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 814:	e7 cf       	rjmp	.-50     	; 0x7e4 <vfprintf+0x24>
 816:	51 2c       	mov	r5, r1
 818:	31 2c       	mov	r3, r1
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	20 32       	cpi	r18, 0x20	; 32
 81e:	a0 f4       	brcc	.+40     	; 0x848 <vfprintf+0x88>
 820:	8b 32       	cpi	r24, 0x2B	; 43
 822:	69 f0       	breq	.+26     	; 0x83e <vfprintf+0x7e>
 824:	30 f4       	brcc	.+12     	; 0x832 <vfprintf+0x72>
 826:	80 32       	cpi	r24, 0x20	; 32
 828:	59 f0       	breq	.+22     	; 0x840 <vfprintf+0x80>
 82a:	83 32       	cpi	r24, 0x23	; 35
 82c:	69 f4       	brne	.+26     	; 0x848 <vfprintf+0x88>
 82e:	20 61       	ori	r18, 0x10	; 16
 830:	2c c0       	rjmp	.+88     	; 0x88a <__stack+0x2b>
 832:	8d 32       	cpi	r24, 0x2D	; 45
 834:	39 f0       	breq	.+14     	; 0x844 <vfprintf+0x84>
 836:	80 33       	cpi	r24, 0x30	; 48
 838:	39 f4       	brne	.+14     	; 0x848 <vfprintf+0x88>
 83a:	21 60       	ori	r18, 0x01	; 1
 83c:	26 c0       	rjmp	.+76     	; 0x88a <__stack+0x2b>
 83e:	22 60       	ori	r18, 0x02	; 2
 840:	24 60       	ori	r18, 0x04	; 4
 842:	23 c0       	rjmp	.+70     	; 0x88a <__stack+0x2b>
 844:	28 60       	ori	r18, 0x08	; 8
 846:	21 c0       	rjmp	.+66     	; 0x88a <__stack+0x2b>
 848:	27 fd       	sbrc	r18, 7
 84a:	27 c0       	rjmp	.+78     	; 0x89a <__stack+0x3b>
 84c:	30 ed       	ldi	r19, 0xD0	; 208
 84e:	38 0f       	add	r19, r24
 850:	3a 30       	cpi	r19, 0x0A	; 10
 852:	78 f4       	brcc	.+30     	; 0x872 <__stack+0x13>
 854:	26 ff       	sbrs	r18, 6
 856:	06 c0       	rjmp	.+12     	; 0x864 <__stack+0x5>
 858:	fa e0       	ldi	r31, 0x0A	; 10
 85a:	5f 9e       	mul	r5, r31
 85c:	30 0d       	add	r19, r0
 85e:	11 24       	eor	r1, r1
 860:	53 2e       	mov	r5, r19
 862:	13 c0       	rjmp	.+38     	; 0x88a <__stack+0x2b>
 864:	8a e0       	ldi	r24, 0x0A	; 10
 866:	38 9e       	mul	r3, r24
 868:	30 0d       	add	r19, r0
 86a:	11 24       	eor	r1, r1
 86c:	33 2e       	mov	r3, r19
 86e:	20 62       	ori	r18, 0x20	; 32
 870:	0c c0       	rjmp	.+24     	; 0x88a <__stack+0x2b>
 872:	8e 32       	cpi	r24, 0x2E	; 46
 874:	21 f4       	brne	.+8      	; 0x87e <__stack+0x1f>
 876:	26 fd       	sbrc	r18, 6
 878:	6b c1       	rjmp	.+726    	; 0xb50 <__stack+0x2f1>
 87a:	20 64       	ori	r18, 0x40	; 64
 87c:	06 c0       	rjmp	.+12     	; 0x88a <__stack+0x2b>
 87e:	8c 36       	cpi	r24, 0x6C	; 108
 880:	11 f4       	brne	.+4      	; 0x886 <__stack+0x27>
 882:	20 68       	ori	r18, 0x80	; 128
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 36       	cpi	r24, 0x68	; 104
 888:	41 f4       	brne	.+16     	; 0x89a <__stack+0x3b>
 88a:	f6 01       	movw	r30, r12
 88c:	93 fd       	sbrc	r25, 3
 88e:	85 91       	lpm	r24, Z+
 890:	93 ff       	sbrs	r25, 3
 892:	81 91       	ld	r24, Z+
 894:	6f 01       	movw	r12, r30
 896:	81 11       	cpse	r24, r1
 898:	c1 cf       	rjmp	.-126    	; 0x81c <vfprintf+0x5c>
 89a:	98 2f       	mov	r25, r24
 89c:	9f 7d       	andi	r25, 0xDF	; 223
 89e:	95 54       	subi	r25, 0x45	; 69
 8a0:	93 30       	cpi	r25, 0x03	; 3
 8a2:	28 f4       	brcc	.+10     	; 0x8ae <__stack+0x4f>
 8a4:	0c 5f       	subi	r16, 0xFC	; 252
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	ff e3       	ldi	r31, 0x3F	; 63
 8aa:	f9 83       	std	Y+1, r31	; 0x01
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__stack+0x69>
 8ae:	83 36       	cpi	r24, 0x63	; 99
 8b0:	31 f0       	breq	.+12     	; 0x8be <__stack+0x5f>
 8b2:	83 37       	cpi	r24, 0x73	; 115
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__stack+0x73>
 8b6:	83 35       	cpi	r24, 0x53	; 83
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	5b c0       	rjmp	.+182    	; 0x972 <__stack+0x113>
 8bc:	22 c0       	rjmp	.+68     	; 0x902 <__stack+0xa3>
 8be:	f8 01       	movw	r30, r16
 8c0:	80 81       	ld	r24, Z
 8c2:	89 83       	std	Y+1, r24	; 0x01
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	44 24       	eor	r4, r4
 8ca:	43 94       	inc	r4
 8cc:	51 2c       	mov	r5, r1
 8ce:	54 01       	movw	r10, r8
 8d0:	15 c0       	rjmp	.+42     	; 0x8fc <__stack+0x9d>
 8d2:	38 01       	movw	r6, r16
 8d4:	f2 e0       	ldi	r31, 0x02	; 2
 8d6:	6f 0e       	add	r6, r31
 8d8:	71 1c       	adc	r7, r1
 8da:	f8 01       	movw	r30, r16
 8dc:	a0 80       	ld	r10, Z
 8de:	b1 80       	ldd	r11, Z+1	; 0x01
 8e0:	26 ff       	sbrs	r18, 6
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <__stack+0x8b>
 8e4:	65 2d       	mov	r22, r5
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	6f ef       	ldi	r22, 0xFF	; 255
 8ec:	7f ef       	ldi	r23, 0xFF	; 255
 8ee:	c5 01       	movw	r24, r10
 8f0:	2c 87       	std	Y+12, r18	; 0x0c
 8f2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <strnlen>
 8f6:	2c 01       	movw	r4, r24
 8f8:	83 01       	movw	r16, r6
 8fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 8fc:	2f 77       	andi	r18, 0x7F	; 127
 8fe:	22 2e       	mov	r2, r18
 900:	17 c0       	rjmp	.+46     	; 0x930 <__stack+0xd1>
 902:	38 01       	movw	r6, r16
 904:	f2 e0       	ldi	r31, 0x02	; 2
 906:	6f 0e       	add	r6, r31
 908:	71 1c       	adc	r7, r1
 90a:	f8 01       	movw	r30, r16
 90c:	a0 80       	ld	r10, Z
 90e:	b1 80       	ldd	r11, Z+1	; 0x01
 910:	26 ff       	sbrs	r18, 6
 912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0xbb>
 914:	65 2d       	mov	r22, r5
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	6f ef       	ldi	r22, 0xFF	; 255
 91c:	7f ef       	ldi	r23, 0xFF	; 255
 91e:	c5 01       	movw	r24, r10
 920:	2c 87       	std	Y+12, r18	; 0x0c
 922:	0e 94 b2 05 	call	0xb64	; 0xb64 <strnlen_P>
 926:	2c 01       	movw	r4, r24
 928:	2c 85       	ldd	r18, Y+12	; 0x0c
 92a:	20 68       	ori	r18, 0x80	; 128
 92c:	22 2e       	mov	r2, r18
 92e:	83 01       	movw	r16, r6
 930:	23 fc       	sbrc	r2, 3
 932:	1b c0       	rjmp	.+54     	; 0x96a <__stack+0x10b>
 934:	83 2d       	mov	r24, r3
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	48 16       	cp	r4, r24
 93a:	59 06       	cpc	r5, r25
 93c:	b0 f4       	brcc	.+44     	; 0x96a <__stack+0x10b>
 93e:	b7 01       	movw	r22, r14
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 948:	3a 94       	dec	r3
 94a:	f4 cf       	rjmp	.-24     	; 0x934 <__stack+0xd5>
 94c:	f5 01       	movw	r30, r10
 94e:	27 fc       	sbrc	r2, 7
 950:	85 91       	lpm	r24, Z+
 952:	27 fe       	sbrs	r2, 7
 954:	81 91       	ld	r24, Z+
 956:	5f 01       	movw	r10, r30
 958:	b7 01       	movw	r22, r14
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 960:	31 10       	cpse	r3, r1
 962:	3a 94       	dec	r3
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	4f 1a       	sub	r4, r31
 968:	51 08       	sbc	r5, r1
 96a:	41 14       	cp	r4, r1
 96c:	51 04       	cpc	r5, r1
 96e:	71 f7       	brne	.-36     	; 0x94c <__stack+0xed>
 970:	e5 c0       	rjmp	.+458    	; 0xb3c <__stack+0x2dd>
 972:	84 36       	cpi	r24, 0x64	; 100
 974:	11 f0       	breq	.+4      	; 0x97a <__stack+0x11b>
 976:	89 36       	cpi	r24, 0x69	; 105
 978:	39 f5       	brne	.+78     	; 0x9c8 <__stack+0x169>
 97a:	f8 01       	movw	r30, r16
 97c:	27 ff       	sbrs	r18, 7
 97e:	07 c0       	rjmp	.+14     	; 0x98e <__stack+0x12f>
 980:	60 81       	ld	r22, Z
 982:	71 81       	ldd	r23, Z+1	; 0x01
 984:	82 81       	ldd	r24, Z+2	; 0x02
 986:	93 81       	ldd	r25, Z+3	; 0x03
 988:	0c 5f       	subi	r16, 0xFC	; 252
 98a:	1f 4f       	sbci	r17, 0xFF	; 255
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x13f>
 98e:	60 81       	ld	r22, Z
 990:	71 81       	ldd	r23, Z+1	; 0x01
 992:	88 27       	eor	r24, r24
 994:	77 fd       	sbrc	r23, 7
 996:	80 95       	com	r24
 998:	98 2f       	mov	r25, r24
 99a:	0e 5f       	subi	r16, 0xFE	; 254
 99c:	1f 4f       	sbci	r17, 0xFF	; 255
 99e:	2f 76       	andi	r18, 0x6F	; 111
 9a0:	b2 2e       	mov	r11, r18
 9a2:	97 ff       	sbrs	r25, 7
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__stack+0x159>
 9a6:	90 95       	com	r25
 9a8:	80 95       	com	r24
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	20 68       	ori	r18, 0x80	; 128
 9b6:	b2 2e       	mov	r11, r18
 9b8:	2a e0       	ldi	r18, 0x0A	; 10
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	a4 01       	movw	r20, r8
 9be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__ultoa_invert>
 9c2:	a8 2e       	mov	r10, r24
 9c4:	a8 18       	sub	r10, r8
 9c6:	44 c0       	rjmp	.+136    	; 0xa50 <__stack+0x1f1>
 9c8:	85 37       	cpi	r24, 0x75	; 117
 9ca:	29 f4       	brne	.+10     	; 0x9d6 <__stack+0x177>
 9cc:	2f 7e       	andi	r18, 0xEF	; 239
 9ce:	b2 2e       	mov	r11, r18
 9d0:	2a e0       	ldi	r18, 0x0A	; 10
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	25 c0       	rjmp	.+74     	; 0xa20 <__stack+0x1c1>
 9d6:	f2 2f       	mov	r31, r18
 9d8:	f9 7f       	andi	r31, 0xF9	; 249
 9da:	bf 2e       	mov	r11, r31
 9dc:	8f 36       	cpi	r24, 0x6F	; 111
 9de:	c1 f0       	breq	.+48     	; 0xa10 <__stack+0x1b1>
 9e0:	18 f4       	brcc	.+6      	; 0x9e8 <__stack+0x189>
 9e2:	88 35       	cpi	r24, 0x58	; 88
 9e4:	79 f0       	breq	.+30     	; 0xa04 <__stack+0x1a5>
 9e6:	b4 c0       	rjmp	.+360    	; 0xb50 <__stack+0x2f1>
 9e8:	80 37       	cpi	r24, 0x70	; 112
 9ea:	19 f0       	breq	.+6      	; 0x9f2 <__stack+0x193>
 9ec:	88 37       	cpi	r24, 0x78	; 120
 9ee:	21 f0       	breq	.+8      	; 0x9f8 <__stack+0x199>
 9f0:	af c0       	rjmp	.+350    	; 0xb50 <__stack+0x2f1>
 9f2:	2f 2f       	mov	r18, r31
 9f4:	20 61       	ori	r18, 0x10	; 16
 9f6:	b2 2e       	mov	r11, r18
 9f8:	b4 fe       	sbrs	r11, 4
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <__stack+0x1b7>
 9fc:	8b 2d       	mov	r24, r11
 9fe:	84 60       	ori	r24, 0x04	; 4
 a00:	b8 2e       	mov	r11, r24
 a02:	09 c0       	rjmp	.+18     	; 0xa16 <__stack+0x1b7>
 a04:	24 ff       	sbrs	r18, 4
 a06:	0a c0       	rjmp	.+20     	; 0xa1c <__stack+0x1bd>
 a08:	9f 2f       	mov	r25, r31
 a0a:	96 60       	ori	r25, 0x06	; 6
 a0c:	b9 2e       	mov	r11, r25
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <__stack+0x1bd>
 a10:	28 e0       	ldi	r18, 0x08	; 8
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <__stack+0x1c1>
 a16:	20 e1       	ldi	r18, 0x10	; 16
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x1c1>
 a1c:	20 e1       	ldi	r18, 0x10	; 16
 a1e:	32 e0       	ldi	r19, 0x02	; 2
 a20:	f8 01       	movw	r30, r16
 a22:	b7 fe       	sbrs	r11, 7
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <__stack+0x1d5>
 a26:	60 81       	ld	r22, Z
 a28:	71 81       	ldd	r23, Z+1	; 0x01
 a2a:	82 81       	ldd	r24, Z+2	; 0x02
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	0c 5f       	subi	r16, 0xFC	; 252
 a30:	1f 4f       	sbci	r17, 0xFF	; 255
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <__stack+0x1e1>
 a34:	60 81       	ld	r22, Z
 a36:	71 81       	ldd	r23, Z+1	; 0x01
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	a4 01       	movw	r20, r8
 a42:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__ultoa_invert>
 a46:	a8 2e       	mov	r10, r24
 a48:	a8 18       	sub	r10, r8
 a4a:	fb 2d       	mov	r31, r11
 a4c:	ff 77       	andi	r31, 0x7F	; 127
 a4e:	bf 2e       	mov	r11, r31
 a50:	b6 fe       	sbrs	r11, 6
 a52:	0b c0       	rjmp	.+22     	; 0xa6a <__stack+0x20b>
 a54:	2b 2d       	mov	r18, r11
 a56:	2e 7f       	andi	r18, 0xFE	; 254
 a58:	a5 14       	cp	r10, r5
 a5a:	50 f4       	brcc	.+20     	; 0xa70 <__stack+0x211>
 a5c:	b4 fe       	sbrs	r11, 4
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <__stack+0x215>
 a60:	b2 fc       	sbrc	r11, 2
 a62:	08 c0       	rjmp	.+16     	; 0xa74 <__stack+0x215>
 a64:	2b 2d       	mov	r18, r11
 a66:	2e 7e       	andi	r18, 0xEE	; 238
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__stack+0x215>
 a6a:	7a 2c       	mov	r7, r10
 a6c:	2b 2d       	mov	r18, r11
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <__stack+0x217>
 a70:	7a 2c       	mov	r7, r10
 a72:	01 c0       	rjmp	.+2      	; 0xa76 <__stack+0x217>
 a74:	75 2c       	mov	r7, r5
 a76:	24 ff       	sbrs	r18, 4
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <__stack+0x235>
 a7a:	fe 01       	movw	r30, r28
 a7c:	ea 0d       	add	r30, r10
 a7e:	f1 1d       	adc	r31, r1
 a80:	80 81       	ld	r24, Z
 a82:	80 33       	cpi	r24, 0x30	; 48
 a84:	11 f4       	brne	.+4      	; 0xa8a <__stack+0x22b>
 a86:	29 7e       	andi	r18, 0xE9	; 233
 a88:	09 c0       	rjmp	.+18     	; 0xa9c <__stack+0x23d>
 a8a:	22 ff       	sbrs	r18, 2
 a8c:	06 c0       	rjmp	.+12     	; 0xa9a <__stack+0x23b>
 a8e:	73 94       	inc	r7
 a90:	73 94       	inc	r7
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <__stack+0x23d>
 a94:	82 2f       	mov	r24, r18
 a96:	86 78       	andi	r24, 0x86	; 134
 a98:	09 f0       	breq	.+2      	; 0xa9c <__stack+0x23d>
 a9a:	73 94       	inc	r7
 a9c:	23 fd       	sbrc	r18, 3
 a9e:	13 c0       	rjmp	.+38     	; 0xac6 <__stack+0x267>
 aa0:	20 ff       	sbrs	r18, 0
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x251>
 aa4:	5a 2c       	mov	r5, r10
 aa6:	73 14       	cp	r7, r3
 aa8:	18 f4       	brcc	.+6      	; 0xab0 <__stack+0x251>
 aaa:	53 0c       	add	r5, r3
 aac:	57 18       	sub	r5, r7
 aae:	73 2c       	mov	r7, r3
 ab0:	73 14       	cp	r7, r3
 ab2:	68 f4       	brcc	.+26     	; 0xace <__stack+0x26f>
 ab4:	b7 01       	movw	r22, r14
 ab6:	80 e2       	ldi	r24, 0x20	; 32
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	2c 87       	std	Y+12, r18	; 0x0c
 abc:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 ac0:	73 94       	inc	r7
 ac2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac4:	f5 cf       	rjmp	.-22     	; 0xab0 <__stack+0x251>
 ac6:	73 14       	cp	r7, r3
 ac8:	10 f4       	brcc	.+4      	; 0xace <__stack+0x26f>
 aca:	37 18       	sub	r3, r7
 acc:	01 c0       	rjmp	.+2      	; 0xad0 <__stack+0x271>
 ace:	31 2c       	mov	r3, r1
 ad0:	24 ff       	sbrs	r18, 4
 ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <__stack+0x299>
 ad4:	b7 01       	movw	r22, r14
 ad6:	80 e3       	ldi	r24, 0x30	; 48
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	2c 87       	std	Y+12, r18	; 0x0c
 adc:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 ae0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae2:	22 ff       	sbrs	r18, 2
 ae4:	17 c0       	rjmp	.+46     	; 0xb14 <__stack+0x2b5>
 ae6:	21 ff       	sbrs	r18, 1
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <__stack+0x291>
 aea:	88 e5       	ldi	r24, 0x58	; 88
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__stack+0x295>
 af0:	88 e7       	ldi	r24, 0x78	; 120
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	b7 01       	movw	r22, r14
 af6:	0c c0       	rjmp	.+24     	; 0xb10 <__stack+0x2b1>
 af8:	82 2f       	mov	r24, r18
 afa:	86 78       	andi	r24, 0x86	; 134
 afc:	59 f0       	breq	.+22     	; 0xb14 <__stack+0x2b5>
 afe:	21 fd       	sbrc	r18, 1
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <__stack+0x2a7>
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	01 c0       	rjmp	.+2      	; 0xb08 <__stack+0x2a9>
 b06:	8b e2       	ldi	r24, 0x2B	; 43
 b08:	27 fd       	sbrc	r18, 7
 b0a:	8d e2       	ldi	r24, 0x2D	; 45
 b0c:	b7 01       	movw	r22, r14
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 b14:	a5 14       	cp	r10, r5
 b16:	38 f4       	brcc	.+14     	; 0xb26 <__stack+0x2c7>
 b18:	b7 01       	movw	r22, r14
 b1a:	80 e3       	ldi	r24, 0x30	; 48
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 b22:	5a 94       	dec	r5
 b24:	f7 cf       	rjmp	.-18     	; 0xb14 <__stack+0x2b5>
 b26:	aa 94       	dec	r10
 b28:	f4 01       	movw	r30, r8
 b2a:	ea 0d       	add	r30, r10
 b2c:	f1 1d       	adc	r31, r1
 b2e:	80 81       	ld	r24, Z
 b30:	b7 01       	movw	r22, r14
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 b38:	a1 10       	cpse	r10, r1
 b3a:	f5 cf       	rjmp	.-22     	; 0xb26 <__stack+0x2c7>
 b3c:	33 20       	and	r3, r3
 b3e:	09 f4       	brne	.+2      	; 0xb42 <__stack+0x2e3>
 b40:	51 ce       	rjmp	.-862    	; 0x7e4 <vfprintf+0x24>
 b42:	b7 01       	movw	r22, r14
 b44:	80 e2       	ldi	r24, 0x20	; 32
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 c8 05 	call	0xb90	; 0xb90 <fputc>
 b4c:	3a 94       	dec	r3
 b4e:	f6 cf       	rjmp	.-20     	; 0xb3c <__stack+0x2dd>
 b50:	f7 01       	movw	r30, r14
 b52:	86 81       	ldd	r24, Z+6	; 0x06
 b54:	97 81       	ldd	r25, Z+7	; 0x07
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <__stack+0x2fd>
 b58:	8f ef       	ldi	r24, 0xFF	; 255
 b5a:	9f ef       	ldi	r25, 0xFF	; 255
 b5c:	2c 96       	adiw	r28, 0x0c	; 12
 b5e:	e2 e1       	ldi	r30, 0x12	; 18
 b60:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__epilogue_restores__>

00000b64 <strnlen_P>:
 b64:	fc 01       	movw	r30, r24
 b66:	05 90       	lpm	r0, Z+
 b68:	61 50       	subi	r22, 0x01	; 1
 b6a:	70 40       	sbci	r23, 0x00	; 0
 b6c:	01 10       	cpse	r0, r1
 b6e:	d8 f7       	brcc	.-10     	; 0xb66 <strnlen_P+0x2>
 b70:	80 95       	com	r24
 b72:	90 95       	com	r25
 b74:	8e 0f       	add	r24, r30
 b76:	9f 1f       	adc	r25, r31
 b78:	08 95       	ret

00000b7a <strnlen>:
 b7a:	fc 01       	movw	r30, r24
 b7c:	61 50       	subi	r22, 0x01	; 1
 b7e:	70 40       	sbci	r23, 0x00	; 0
 b80:	01 90       	ld	r0, Z+
 b82:	01 10       	cpse	r0, r1
 b84:	d8 f7       	brcc	.-10     	; 0xb7c <strnlen+0x2>
 b86:	80 95       	com	r24
 b88:	90 95       	com	r25
 b8a:	8e 0f       	add	r24, r30
 b8c:	9f 1f       	adc	r25, r31
 b8e:	08 95       	ret

00000b90 <fputc>:
 b90:	0f 93       	push	r16
 b92:	1f 93       	push	r17
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	18 2f       	mov	r17, r24
 b9a:	09 2f       	mov	r16, r25
 b9c:	eb 01       	movw	r28, r22
 b9e:	8b 81       	ldd	r24, Y+3	; 0x03
 ba0:	81 fd       	sbrc	r24, 1
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <fputc+0x1a>
 ba4:	8f ef       	ldi	r24, 0xFF	; 255
 ba6:	9f ef       	ldi	r25, 0xFF	; 255
 ba8:	20 c0       	rjmp	.+64     	; 0xbea <fputc+0x5a>
 baa:	82 ff       	sbrs	r24, 2
 bac:	10 c0       	rjmp	.+32     	; 0xbce <fputc+0x3e>
 bae:	4e 81       	ldd	r20, Y+6	; 0x06
 bb0:	5f 81       	ldd	r21, Y+7	; 0x07
 bb2:	2c 81       	ldd	r18, Y+4	; 0x04
 bb4:	3d 81       	ldd	r19, Y+5	; 0x05
 bb6:	42 17       	cp	r20, r18
 bb8:	53 07       	cpc	r21, r19
 bba:	7c f4       	brge	.+30     	; 0xbda <fputc+0x4a>
 bbc:	e8 81       	ld	r30, Y
 bbe:	f9 81       	ldd	r31, Y+1	; 0x01
 bc0:	9f 01       	movw	r18, r30
 bc2:	2f 5f       	subi	r18, 0xFF	; 255
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	39 83       	std	Y+1, r19	; 0x01
 bc8:	28 83       	st	Y, r18
 bca:	10 83       	st	Z, r17
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <fputc+0x4a>
 bce:	e8 85       	ldd	r30, Y+8	; 0x08
 bd0:	f9 85       	ldd	r31, Y+9	; 0x09
 bd2:	81 2f       	mov	r24, r17
 bd4:	09 95       	icall
 bd6:	89 2b       	or	r24, r25
 bd8:	29 f7       	brne	.-54     	; 0xba4 <fputc+0x14>
 bda:	2e 81       	ldd	r18, Y+6	; 0x06
 bdc:	3f 81       	ldd	r19, Y+7	; 0x07
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	3f 83       	std	Y+7, r19	; 0x07
 be4:	2e 83       	std	Y+6, r18	; 0x06
 be6:	81 2f       	mov	r24, r17
 be8:	90 2f       	mov	r25, r16
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	0f 91       	pop	r16
 bf2:	08 95       	ret

00000bf4 <__ultoa_invert>:
 bf4:	fa 01       	movw	r30, r20
 bf6:	aa 27       	eor	r26, r26
 bf8:	28 30       	cpi	r18, 0x08	; 8
 bfa:	51 f1       	breq	.+84     	; 0xc50 <__ultoa_invert+0x5c>
 bfc:	20 31       	cpi	r18, 0x10	; 16
 bfe:	81 f1       	breq	.+96     	; 0xc60 <__ultoa_invert+0x6c>
 c00:	e8 94       	clt
 c02:	6f 93       	push	r22
 c04:	6e 7f       	andi	r22, 0xFE	; 254
 c06:	6e 5f       	subi	r22, 0xFE	; 254
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	af 4f       	sbci	r26, 0xFF	; 255
 c10:	b1 e0       	ldi	r27, 0x01	; 1
 c12:	3e d0       	rcall	.+124    	; 0xc90 <__ultoa_invert+0x9c>
 c14:	b4 e0       	ldi	r27, 0x04	; 4
 c16:	3c d0       	rcall	.+120    	; 0xc90 <__ultoa_invert+0x9c>
 c18:	67 0f       	add	r22, r23
 c1a:	78 1f       	adc	r23, r24
 c1c:	89 1f       	adc	r24, r25
 c1e:	9a 1f       	adc	r25, r26
 c20:	a1 1d       	adc	r26, r1
 c22:	68 0f       	add	r22, r24
 c24:	79 1f       	adc	r23, r25
 c26:	8a 1f       	adc	r24, r26
 c28:	91 1d       	adc	r25, r1
 c2a:	a1 1d       	adc	r26, r1
 c2c:	6a 0f       	add	r22, r26
 c2e:	71 1d       	adc	r23, r1
 c30:	81 1d       	adc	r24, r1
 c32:	91 1d       	adc	r25, r1
 c34:	a1 1d       	adc	r26, r1
 c36:	20 d0       	rcall	.+64     	; 0xc78 <__ultoa_invert+0x84>
 c38:	09 f4       	brne	.+2      	; 0xc3c <__ultoa_invert+0x48>
 c3a:	68 94       	set
 c3c:	3f 91       	pop	r19
 c3e:	2a e0       	ldi	r18, 0x0A	; 10
 c40:	26 9f       	mul	r18, r22
 c42:	11 24       	eor	r1, r1
 c44:	30 19       	sub	r19, r0
 c46:	30 5d       	subi	r19, 0xD0	; 208
 c48:	31 93       	st	Z+, r19
 c4a:	de f6       	brtc	.-74     	; 0xc02 <__ultoa_invert+0xe>
 c4c:	cf 01       	movw	r24, r30
 c4e:	08 95       	ret
 c50:	46 2f       	mov	r20, r22
 c52:	47 70       	andi	r20, 0x07	; 7
 c54:	40 5d       	subi	r20, 0xD0	; 208
 c56:	41 93       	st	Z+, r20
 c58:	b3 e0       	ldi	r27, 0x03	; 3
 c5a:	0f d0       	rcall	.+30     	; 0xc7a <__ultoa_invert+0x86>
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__ultoa_invert+0x5c>
 c5e:	f6 cf       	rjmp	.-20     	; 0xc4c <__ultoa_invert+0x58>
 c60:	46 2f       	mov	r20, r22
 c62:	4f 70       	andi	r20, 0x0F	; 15
 c64:	40 5d       	subi	r20, 0xD0	; 208
 c66:	4a 33       	cpi	r20, 0x3A	; 58
 c68:	18 f0       	brcs	.+6      	; 0xc70 <__ultoa_invert+0x7c>
 c6a:	49 5d       	subi	r20, 0xD9	; 217
 c6c:	31 fd       	sbrc	r19, 1
 c6e:	40 52       	subi	r20, 0x20	; 32
 c70:	41 93       	st	Z+, r20
 c72:	02 d0       	rcall	.+4      	; 0xc78 <__ultoa_invert+0x84>
 c74:	a9 f7       	brne	.-22     	; 0xc60 <__ultoa_invert+0x6c>
 c76:	ea cf       	rjmp	.-44     	; 0xc4c <__ultoa_invert+0x58>
 c78:	b4 e0       	ldi	r27, 0x04	; 4
 c7a:	a6 95       	lsr	r26
 c7c:	97 95       	ror	r25
 c7e:	87 95       	ror	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	ba 95       	dec	r27
 c86:	c9 f7       	brne	.-14     	; 0xc7a <__ultoa_invert+0x86>
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	61 05       	cpc	r22, r1
 c8c:	71 05       	cpc	r23, r1
 c8e:	08 95       	ret
 c90:	9b 01       	movw	r18, r22
 c92:	ac 01       	movw	r20, r24
 c94:	0a 2e       	mov	r0, r26
 c96:	06 94       	lsr	r0
 c98:	57 95       	ror	r21
 c9a:	47 95       	ror	r20
 c9c:	37 95       	ror	r19
 c9e:	27 95       	ror	r18
 ca0:	ba 95       	dec	r27
 ca2:	c9 f7       	brne	.-14     	; 0xc96 <__ultoa_invert+0xa2>
 ca4:	62 0f       	add	r22, r18
 ca6:	73 1f       	adc	r23, r19
 ca8:	84 1f       	adc	r24, r20
 caa:	95 1f       	adc	r25, r21
 cac:	a0 1d       	adc	r26, r0
 cae:	08 95       	ret

00000cb0 <__prologue_saves__>:
 cb0:	2f 92       	push	r2
 cb2:	3f 92       	push	r3
 cb4:	4f 92       	push	r4
 cb6:	5f 92       	push	r5
 cb8:	6f 92       	push	r6
 cba:	7f 92       	push	r7
 cbc:	8f 92       	push	r8
 cbe:	9f 92       	push	r9
 cc0:	af 92       	push	r10
 cc2:	bf 92       	push	r11
 cc4:	cf 92       	push	r12
 cc6:	df 92       	push	r13
 cc8:	ef 92       	push	r14
 cca:	ff 92       	push	r15
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	cd b7       	in	r28, 0x3d	; 61
 cd6:	de b7       	in	r29, 0x3e	; 62
 cd8:	ca 1b       	sub	r28, r26
 cda:	db 0b       	sbc	r29, r27
 cdc:	0f b6       	in	r0, 0x3f	; 63
 cde:	f8 94       	cli
 ce0:	de bf       	out	0x3e, r29	; 62
 ce2:	0f be       	out	0x3f, r0	; 63
 ce4:	cd bf       	out	0x3d, r28	; 61
 ce6:	09 94       	ijmp

00000ce8 <__epilogue_restores__>:
 ce8:	2a 88       	ldd	r2, Y+18	; 0x12
 cea:	39 88       	ldd	r3, Y+17	; 0x11
 cec:	48 88       	ldd	r4, Y+16	; 0x10
 cee:	5f 84       	ldd	r5, Y+15	; 0x0f
 cf0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cf2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cfa:	b9 84       	ldd	r11, Y+9	; 0x09
 cfc:	c8 84       	ldd	r12, Y+8	; 0x08
 cfe:	df 80       	ldd	r13, Y+7	; 0x07
 d00:	ee 80       	ldd	r14, Y+6	; 0x06
 d02:	fd 80       	ldd	r15, Y+5	; 0x05
 d04:	0c 81       	ldd	r16, Y+4	; 0x04
 d06:	1b 81       	ldd	r17, Y+3	; 0x03
 d08:	aa 81       	ldd	r26, Y+2	; 0x02
 d0a:	b9 81       	ldd	r27, Y+1	; 0x01
 d0c:	ce 0f       	add	r28, r30
 d0e:	d1 1d       	adc	r29, r1
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	ed 01       	movw	r28, r26
 d1c:	08 95       	ret

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
