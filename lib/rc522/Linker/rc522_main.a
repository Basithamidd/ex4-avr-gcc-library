;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.6
;Automatic Program Generator
;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : RC522
;Version : 1
;Date    : 2/27/2015
;Author  : EX4
;Company : EX4 TECH
;Comments:
;RC522 RFID READER WRITER
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;// avr lib
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <string.h>
;
;// spi lib
;#include <spix.h>
;
;// rc522 lib
;#include <mfrc522.h>
;
;// mode debug
;#define DEBUG_ON
;
;
;/*
;usart setup for debugging at 8-N-1-9600bps-No Parity
;*/
;void usart_init(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030     UCSRA=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0031     UCSRB=0x18;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0032     UCSRC=0x86;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0033     UBRRH=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0034     UBRRL=0x4D;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0035 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;/*
;check rc522 rfid reader writer presence
;*/
;void rc522_check_reader()
; 0000 003B {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003C 	uint8_t curr_read_status = mfrc522_get_version();
; 0000 003D 	if (curr_read_status<0x90 || curr_read_status>0x92)
;PCODE: $0000001D VOL: 0
;	curr_read_status -> R17
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003E 	{
; 0000 003F         #if defined(DEBUG_ON)
; 0000 0040 		    printf("NO READER\n");
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0041         #endif
; 0000 0042 		for(;;);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0043 	}
; 0000 0044 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;/*
;read card serial id
;*/
;uint8_t rc522_read_card_id(uint8_t *card_id, uint16_t *card_type)
; 0000 004A {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004B 	uint8_t status, resx = 0;
; 0000 004C 	uint8_t buff_data[MAX_LEN];
; 0000 004D 
; 0000 004E     *card_type = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	*card_id -> Y+20
;	*card_type -> Y+18
;	status -> R17
;	resx -> R16
;	buff_data -> Y+2
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004F 	if(mfrc522_is_card(card_type))
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0050 	{
; 0000 0051 		status = mfrc522_get_card_serial(buff_data);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0052 		if (status==CARD_FOUND)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0053 		{
; 0000 0054 			memcpy(card_id,buff_data,5);//kopi id and checksum at last byte (5th)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0055 			resx = 1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0056 		}
; 0000 0057 		else
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0058 		{
; 0000 0059 			resx = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 005A 		}
;PCODE: $0000005A VOL: 0
; 0000 005B 	}
; 0000 005C 	else
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005D 	{
; 0000 005E 		resx = 0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005F 	}
;PCODE: $0000005F VOL: 0
; 0000 0060 
; 0000 0061 	return resx;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0062 }
;PCODE: $00000067 VOL: 0
;
;/*
;  main program
;*/
;void main(void)
; 0000 0068 {
;PCODE: $00000068 VOL: 0
; 0000 0069     //local var
; 0000 006A     uint8_t curr_id[5];
; 0000 006B     uint16_t card_tipe;
; 0000 006C     uint8_t str[MAX_LEN];
; 0000 006D     uint8_t status;
; 0000 006E 
; 0000 006F     //start up delay
; 0000 0070     delay_ms(1000);
;PCODE: $00000069 VOL: 0
;	curr_id -> Y+16
;	card_tipe -> R16,R17
;	str -> Y+0
;	status -> R19
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0071 
; 0000 0072     //init usart
; 0000 0073     usart_init();
;PCODE: $0000006C VOL: 0
; 0000 0074 
; 0000 0075     #if defined(DEBUG_ON)
; 0000 0076     printf("RC522 TEST\n");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0077     #endif
; 0000 0078 
; 0000 0079     // init spi as master
; 0000 007A     spi_init();
;PCODE: $00000074 VOL: 0
; 0000 007B 
; 0000 007C     // init rc522
; 0000 007D     mfrc522_init();
;PCODE: $00000075 VOL: 0
; 0000 007E 
; 0000 007F     // check reader attached???
; 0000 0080     rc522_check_reader();
;PCODE: $00000076 VOL: 0
; 0000 0081 
; 0000 0082     #if defined(DEBUG_ON)
; 0000 0083     printf("RC522 DETECTED\n");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0084     #endif
; 0000 0085 
; 0000 0086     while (1)
;PCODE: $0000007E VOL: 0
; 0000 0087     {
; 0000 0088         // read id card
; 0000 0089         if (rc522_read_card_id(curr_id, &card_tipe))
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 008A         {
; 0000 008B             printf("%.2X%.2X%.2X%.2X%.2X %.4X\n", curr_id[0], curr_id[1], curr_id[2], curr_id[3], curr_id[4], card_tipe);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 008C 
; 0000 008D             // select the tag
; 0000 008E             printf("select = %.2X\n", mfrc522_select_tag(curr_id));
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008F 
; 0000 0090             //login to block 4
; 0000 0091             printf("login = %d\n", mfrc522_auth(PICC_AUTHENT1A, 4, keyA_default, curr_id));
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0092 
; 0000 0093             //read block 4
; 0000 0094             status = mfrc522_read_block(4, str);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0095             printf("read = %d  %.2X %.2X %.2X\n", status, str[0], str[1], str[2]);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0096 
; 0000 0097 //            delay_ms(1000);
; 0000 0098 //
; 0000 0099 //            //login to block 4
; 0000 009A //            printf("login = %d\n", mfrc522_auth(PICC_AUTHENT1A, 4, keyA_default, curr_id));
; 0000 009B //
; 0000 009C //            //write block 4
; 0000 009D //            str[0] = 1;
; 0000 009E //            str[1] = 2;
; 0000 009F //            str[2] = 3;
; 0000 00A0 //            status = mfrc522_write_block(4, str);
; 0000 00A1 //
; 0000 00A2 //            delay_ms(1000);
; 0000 00A3 //
; 0000 00A4 //            //login to block 4
; 0000 00A5 //            printf("login = %d\n", mfrc522_auth(PICC_AUTHENT1A, 4, keyA_default, curr_id));
; 0000 00A6 //
; 0000 00A7 //            //read block 4
; 0000 00A8 //            status = mfrc522_read_block(4, str);
; 0000 00A9 //            printf("read = %d  %.2X %.2X %.2X\n", status, str[0], str[1], str[2]);
; 0000 00AA         }
; 0000 00AB 
; 0000 00AC         //halt the card
; 0000 00AD         mfrc522_halt();
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00AE 
; 0000 00AF         //delay
; 0000 00B0         delay_ms(100);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00B1 
; 0000 00B2         //eternal loop
; 0000 00B3 //        for(;;);
; 0000 00B4     }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B5 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
