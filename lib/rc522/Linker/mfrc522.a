;/*
; * mfrc522.c
; *
; * Copyright 2013 Shimon <shimon@monistit.com>
; *
; * This program is free software; you can redistribute it and/or modify
; * it under the terms of the GNU General Public License as published by
; * the Free Software Foundation; either version 2 of the License, or
; * (at your option) any later version.
; *
; * This program is distributed in the hope that it will be useful,
; * but WITHOUT ANY WARRANTY; without even the implied warranty of
; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; * GNU General Public License for more details.
; *
; * You should have received a copy of the GNU General Public License
; * along with this program; if not, write to the Free Software
; * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
; * MA 02110-1301, USA.
; *
; *
; */
;#include <mfrc522.h>
;#include <spix.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//key default A and B
;uint8_t keyA_default[6] = {0xff,0xff,0xff,0xff,0xff,0xff};

	.DSEG
;uint8_t keyB_default[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
;
;/*
;initialize rc522
;*/
;void mfrc522_init()
; 0002 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0023 	uint8_t byte;
; 0002 0024 	mfrc522_reset();
;PCODE: $0000000F VOL: 0
;	byte -> R17
;PCODE: $00000010 VOL: 0
; 0002 0025 
; 0002 0026 	mfrc522_write(TModeReg, 0x8D);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0027     mfrc522_write(TPrescalerReg, 0x3E);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0028     mfrc522_write(TReloadReg_1, 30);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 0029     mfrc522_write(TReloadReg_2, 0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 002A 	mfrc522_write(TxASKReg, 0x40);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 002B 	mfrc522_write(ModeReg, 0x3D);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 002C 
; 0002 002D     // antenna on
; 0002 002E 	byte = mfrc522_read(TxControlReg);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 002F 	if(!(byte&0x03))
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0030 	{
; 0002 0031 		mfrc522_write(TxControlReg,byte|0x03);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 0032 	}
; 0002 0033 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;/*
;write data to rc522 register
;*/
;void mfrc522_write(uint8_t reg, uint8_t data)
; 0002 0039 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 003A 	ENABLE_CHIP();
;PCODE: $0000003B VOL: 0
;	reg -> Y+1
;	data -> Y+0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0002 003B 	spi_transmit((reg<<1)&0x7E);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 003C 	spi_transmit(data);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 003D 	DISABLE_CHIP();
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 003E }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;/*
;read data from rc522 register
;*/
;uint8_t mfrc522_read(uint8_t reg)
; 0002 0044 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 0045 	uint8_t data;
; 0002 0046 	ENABLE_CHIP();
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;	reg -> Y+1
;	data -> R17
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0047 	spi_transmit(((reg<<1)&0x7E)|0x80);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 0048 	data = spi_transmit(0x00);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0049 	DISABLE_CHIP();
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 004A 	return data;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 004B }
;PCODE: $00000060 VOL: 0
;
;/*
;soft reset rc522
;*/
;void mfrc522_reset()
; 0002 0051 {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0002 0052 	mfrc522_write(CommandReg,SoftReset_CMD);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0053 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;/*
;make command request to rc522
;*/
;uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
; 0002 0059 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 005A 	uint8_t  status;
; 0002 005B 	uint32_t backBits;//The received data bits
; 0002 005C 
; 0002 005D 	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	req_mode -> Y+7
;	*tag_type -> Y+5
;	status -> R17
;	backBits -> Y+1
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 005E 
; 0002 005F 	tag_type[0] = req_mode;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 0060 	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0061 
; 0002 0062 	if ((status != CARD_FOUND) || (backBits != 0x10))
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 0063 	{
; 0002 0064 		status = ERROR;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0002 0065 	}
; 0002 0066 
; 0002 0067 	return status;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0002 0068 }
;PCODE: $00000090 VOL: 0
;
;/*
;send command to rc522 to card
;*/
;uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
; 0002 006E {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 006F 	uint8_t status = ERROR;
; 0002 0070     uint8_t irqEn = 0x00;
; 0002 0071     uint8_t waitIRq = 0x00;
; 0002 0072     uint8_t lastBits;
; 0002 0073     uint8_t n;
; 0002 0074     uint8_t	tmp;
; 0002 0075     uint32_t i;
; 0002 0076 
; 0002 0077     switch (cmd)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;	cmd -> Y+17
;	*send_data -> Y+15
;	send_data_len -> Y+14
;	*back_data -> Y+12
;	*back_data_len -> Y+10
;	status -> R17
;	irqEn -> R16
;	waitIRq -> R19
;	lastBits -> R18
;	n -> R21
;	tmp -> R20
;	i -> Y+6
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0002 0078     {
; 0002 0079         case MFAuthent_CMD:		//Certification cards close
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0002 007A 		{
; 0002 007B 			irqEn = 0x12;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0002 007C 			waitIRq = 0x10;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0002 007D 			break;
;PCODE: $000000A4 VOL: 0
; 0002 007E 		}
; 0002 007F 		case Transceive_CMD:	//Transmit FIFO data
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 0080 		{
; 0002 0081 			irqEn = 0x77;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 0082 			waitIRq = 0x30;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0002 0083 			break;
;PCODE: $000000AC VOL: 0
; 0002 0084 		}
; 0002 0085 		default:
;PCODE: $000000AD VOL: 0
; 0002 0086 			break;
;PCODE: $000000AE VOL: 0
; 0002 0087     }
;PCODE: $000000AF VOL: 0
; 0002 0088 
; 0002 0089     //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
; 0002 008A     n=mfrc522_read(ComIrqReg);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0002 008B     mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 008C     n=mfrc522_read(FIFOLevelReg);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 008D     mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 008E 
; 0002 008F 	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 0090 
; 0002 0091 	//Writing data to the FIFO
; 0002 0092     for (i=0; i<send_data_len; i++)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0093     {
; 0002 0094 		mfrc522_write(FIFODataReg, send_data[i]);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 0095 	}
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0002 0096 
; 0002 0097 	//Execute the cmd
; 0002 0098 	mfrc522_write(CommandReg, cmd);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0002 0099     if (cmd == Transceive_CMD)
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 009A     {
; 0002 009B 		n=mfrc522_read(BitFramingReg);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 009C 		mfrc522_write(BitFramingReg,n|0x80);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0002 009D 	}
; 0002 009E 
; 0002 009F 	//Waiting to receive data to complete
; 0002 00A0 	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 00A1     do
;PCODE: $000000F2 VOL: 0
; 0002 00A2     {
; 0002 00A3 		//CommIrqReg[7..0]
; 0002 00A4 		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
; 0002 00A5         n = mfrc522_read(ComIrqReg);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 00A6         i--;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 00A7     }
; 0002 00A8     while ((i!=0) && !(n&0x01) && !(n&waitIRq));
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0002 00A9 
; 0002 00AA 	tmp=mfrc522_read(BitFramingReg);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 00AB 	mfrc522_write(BitFramingReg,tmp&(~0x80));
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0002 00AC 
; 0002 00AD     if (i != 0)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0002 00AE     {
; 0002 00AF         if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0002 00B0         {
; 0002 00B1             status = CARD_FOUND;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0002 00B2             if (n & irqEn & 0x01)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 00B3             {
; 0002 00B4 				status = CARD_NOT_FOUND;			//??
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0002 00B5 			}
; 0002 00B6 
; 0002 00B7             if (cmd == Transceive_CMD)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0002 00B8             {
; 0002 00B9                	n = mfrc522_read(FIFOLevelReg);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 00BA               	lastBits = mfrc522_read(ControlReg) & 0x07;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0002 00BB                 if (lastBits)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 00BC                 {
; 0002 00BD 					*back_data_len = (uint32_t)(n-1)*8 + (uint32_t)lastBits;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0002 00BE 				}
; 0002 00BF                 else
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0002 00C0                 {
; 0002 00C1 					*back_data_len = (uint32_t)n*8;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0002 00C2 				}
;PCODE: $00000144 VOL: 0
; 0002 00C3 
; 0002 00C4                 if (n == 0)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0002 00C5                 {
; 0002 00C6 					n = 1;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0002 00C7 				}
; 0002 00C8                 if (n > MAX_LEN)
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0002 00C9                 {
; 0002 00CA 					n = MAX_LEN;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0002 00CB 				}
; 0002 00CC 
; 0002 00CD 				//Reading the received data in FIFO
; 0002 00CE                 for (i=0; i<n; i++)
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0002 00CF                 {
; 0002 00D0 					back_data[i] = mfrc522_read(FIFODataReg);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0002 00D1 				}
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0002 00D2             }
; 0002 00D3         }
;PCODE: $0000016A VOL: 0
; 0002 00D4         else
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 00D5         {
; 0002 00D6 			status = ERROR;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0002 00D7 		}
;PCODE: $0000016F VOL: 0
; 0002 00D8 
; 0002 00D9     }
; 0002 00DA 
; 0002 00DB     //SetBitMask(ControlReg,0x80);           //timer stops
; 0002 00DC     //mfrc522_write(cmdReg, PCD_IDLE);
; 0002 00DD 
; 0002 00DE     return status;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0002 00DF }
;PCODE: $00000175 VOL: 0
;
;/*
;get card serial
;*/
;uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
; 0002 00E5 {
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0002 00E6 	uint8_t status;
; 0002 00E7     uint8_t i;
; 0002 00E8 	uint8_t serNumCheck=0;
; 0002 00E9     uint32_t unLen;
; 0002 00EA 
; 0002 00EB 	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;	*serial_out -> Y+8
;	status -> R17
;	i -> R16
;	serNumCheck -> R19
;	unLen -> Y+4
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 00EC 
; 0002 00ED     serial_out[0] = PICC_ANTICOLL;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0002 00EE     serial_out[1] = 0x20;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0002 00EF     status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0002 00F0 
; 0002 00F1     if (status == CARD_FOUND)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0002 00F2 	{
; 0002 00F3 		//Check card serial number
; 0002 00F4 		for (i=0; i<4; i++)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0002 00F5 		{
; 0002 00F6 		 	serNumCheck ^= serial_out[i];
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0002 00F7 		}
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0002 00F8 		if (serNumCheck != serial_out[i])
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0002 00F9 		{
; 0002 00FA 			status = ERROR;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0002 00FB 		}
; 0002 00FC     }
;PCODE: $000001B0 VOL: 0
; 0002 00FD     return status;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0002 00FE }
;PCODE: $000001B6 VOL: 0
;
;/*
;set bit mask
;*/
;void mfrc522_setBitMask(uint8_t reg, uint8_t mask)
; 0002 0104 {
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 0105 	uint8_t tmp;
; 0002 0106 	tmp = mfrc522_read(reg);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;	reg -> Y+2
;	mask -> Y+1
;	tmp -> R17
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0002 0107 	mfrc522_write(reg, tmp | mask);  // set bit mask
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0002 0108 }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;
;/*
;clear bit mask
;*/
;void mfrc522_clearBitMask(uint8_t reg, uint8_t mask)
; 0002 010E {
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0002 010F 	uint8_t tmp;
; 0002 0110 	tmp = mfrc522_read(reg);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;	reg -> Y+2
;	mask -> Y+1
;	tmp -> R17
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 0111 	mfrc522_write(reg, tmp & (~mask));  // clear bit mask
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0002 0112 }
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;
;/*
;calculate crc using rc522 chip
;*/
;void mfrc522_calculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
; 0002 0118 {
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0002 0119 	uint8_t i, n;
; 0002 011A 
; 0002 011B 	mfrc522_clearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;	*pIndata -> Y+5
;	len -> Y+4
;	*pOutData -> Y+2
;	i -> R17
;	n -> R16
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 011C 	mfrc522_setBitMask(FIFOLevelReg, 0x80);			//Claro puntero FIFO
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0002 011D 	//Write_MFRC522(CommandReg, PCD_IDLE);
; 0002 011E 
; 0002 011F 	//Escribir datos en el FIFO
; 0002 0120 	for (i=0; i<len; i++)
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0002 0121 	{
; 0002 0122 		mfrc522_write(FIFODataReg, *(pIndata+i));
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0002 0123 	}
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0002 0124 	mfrc522_write(CommandReg, PCD_CALCCRC);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0002 0125 
; 0002 0126 	// Esperar a la finalizaciÃ³n de cÃ¡lculo del CRC
; 0002 0127 	i = 0xFF;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0002 0128 	do
;PCODE: $00000204 VOL: 0
; 0002 0129 	{
; 0002 012A 		n = mfrc522_read(DivIrqReg);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0002 012B 		i--;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0002 012C 	}
; 0002 012D 	while ((i!=0) && !(n&0x04));			//CRCIrq = 1
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0002 012E 
; 0002 012F 	//Lea el cÃ¡lculo de CRC
; 0002 0130 	pOutData[0] = mfrc522_read(CRCResultReg_2);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0002 0131 	pOutData[1] = mfrc522_read(CRCResultReg_1);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0002 0132 }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;
;/*
;halt the card (release it to be able to read again)
;*/
;uint8_t mfrc522_halt()
; 0002 0138 {
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0139 	uint8_t status;
; 0002 013A 	uint32_t unLen;
; 0002 013B 	uint8_t buff[4];
; 0002 013C 
; 0002 013D 	buff[0] = PICC_HALT;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;	status -> R17
;	unLen -> Y+5
;	buff -> Y+1
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0002 013E 	buff[1] = 0;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 013F 	mfrc522_calculateCRC(buff, 2, &buff[2]);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0002 0140 
; 0002 0141 	mfrc522_clearBitMask(Status2Reg, 0x08); // turn off encryption
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0002 0142 
; 0002 0143 	status = mfrc522_to_card(Transceive_CMD, buff, 4, buff,&unLen);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0002 0144 
; 0002 0145 	return status;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0002 0146 }
;PCODE: $00000247 VOL: 0
;
;/*
;get reader version
;*/
;uint8_t mfrc522_get_version()
; 0002 014C {
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0002 014D 	return mfrc522_read(VersionReg);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0002 014E }
;PCODE: $0000024D VOL: 0
;
;/*
;check if card is in range
;*/
;uint8_t mfrc522_is_card(uint16_t *card_type)
; 0002 0154 {
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0002 0155 	uint8_t buff_data[MAX_LEN],
; 0002 0156     status = mfrc522_request(PICC_REQIDL,buff_data);
; 0002 0157     if(status == CARD_FOUND){
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;	*card_type -> Y+17
;	buff_data -> Y+1
;	status -> R17
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0002 0158         *card_type = (buff_data[0]<<8)+buff_data[1];
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0002 0159         return 1;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0002 015A     }
; 0002 015B     else{
;PCODE: $00000267 VOL: 0
; 0002 015C         return 0;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0002 015D     }
;PCODE: $0000026D VOL: 0
; 0002 015E }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;
;/*
; * Function Name : MFRC522_Auth
; * Description : Verify card password
; * Input parameters : authMode - Password Authentication Mode
;                 0x60 = A key authentication
;                 0x61 = B key authentication
;             BlockAddr - block address
;             Sectorkey - Sector password
;             serNum - card serial number, 4-byte
; * Return value: the successful return CARD_FOUND
; */
;uint8_t mfrc522_auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum)
; 0002 016C {
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0002 016D     uint8_t status;
; 0002 016E     uint32_t recvBits;
; 0002 016F     uint8_t i;
; 0002 0170 	uint8_t buff[12];
; 0002 0171 
; 0002 0172     // Validate instruction block address + sector + password + card serial number
; 0002 0173     buff[0] = authMode;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;	authMode -> Y+23
;	BlockAddr -> Y+22
;	*Sectorkey -> Y+20
;	*serNum -> Y+18
;	status -> R17
;	recvBits -> Y+14
;	i -> R16
;	buff -> Y+2
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0002 0174     buff[1] = BlockAddr;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0002 0175     for (i=0; i<6; i++)
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0002 0176     {
; 0002 0177 		buff[i+2] = *(Sectorkey+i);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0002 0178 	}
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0002 0179     for (i=0; i<4; i++)
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0002 017A     {
; 0002 017B 		buff[i+8] = *(serNum+i);
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0002 017C 	}
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0002 017D     status = mfrc522_to_card(PCD_AUTHENT, buff, 12, buff, &recvBits);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0002 017E     i = mfrc522_read(Status2Reg);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0002 017F 
; 0002 0180     if ((status != CARD_FOUND) || (!(i & 0x08)))
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0002 0181     {
; 0002 0182 		status = ERROR;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0002 0183 	}
; 0002 0184 
; 0002 0185     return status;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0002 0186 }
;PCODE: $000002D3 VOL: 0
;
;/*
; * Function Name : MFRC522_Write
; * Description : Write block data
; * Input parameters : blockAddr - block address ; writeData - to 16-byte data block write
; * Return value: the successful return CARD_FOUND
; */
;uint8_t mfrc522_write_block(uint8_t blockAddr, uint8_t *writeData)
; 0002 018F {
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0002 0190     uint8_t status;
; 0002 0191     uint32_t recvBits;
; 0002 0192     uint8_t i;
; 0002 0193 	uint8_t buff[18];
; 0002 0194 
; 0002 0195     buff[0] = PICC_WRITE;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;	blockAddr -> Y+26
;	*writeData -> Y+24
;	status -> R17
;	recvBits -> Y+20
;	i -> R16
;	buff -> Y+2
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0002 0196     buff[1] = blockAddr;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0002 0197     mfrc522_calculateCRC(buff, 2, &buff[2]);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0002 0198     status = mfrc522_to_card(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0002 0199 
; 0002 019A     //cek
; 0002 019B     //printf("w1 = %d\t%d\t%.2X\n", status, recvBits, buff[0]);
; 0002 019C 
; 0002 019D     if ((status != CARD_FOUND) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0002 019E     {
; 0002 019F 		status = ERROR;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0002 01A0 	}
; 0002 01A1 
; 0002 01A2     if (status == CARD_FOUND)
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0002 01A3     {
; 0002 01A4         for (i=0; i<16; i++)		//?FIFO?16Byte??
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0002 01A5         {
; 0002 01A6         	buff[i] = *(writeData+i);
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0002 01A7         }
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0002 01A8         mfrc522_calculateCRC(buff, 16, &buff[16]);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0002 01A9         status = mfrc522_to_card(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0002 01AA 
; 0002 01AB         //cek
; 0002 01AC         //printf("w2 = %d\t%d\t%.2X\n", status, recvBits, buff[0]);
; 0002 01AD 
; 0002 01AE 		if ((status != CARD_FOUND) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0002 01AF         {
; 0002 01B0 			status = ERROR;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0002 01B1 		}
; 0002 01B2     }
;PCODE: $0000033A VOL: 0
; 0002 01B3 
; 0002 01B4     return status;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0002 01B5 }
;PCODE: $00000343 VOL: 0
;
;/*
; * Function Name : MFRC522_Read
; * Description : Read block data
; * Input parameters : blockAddr - block address ; recvData - read block data
; * Return value: the successful return MI_OK
; */
;uint8_t mfrc522_read_block(uint8_t blockAddr, uint8_t *recvData)
; 0002 01BE {
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0002 01BF     uint8_t status;
; 0002 01C0     uint32_t unLen;
; 0002 01C1 
; 0002 01C2     recvData[0] = PICC_READ;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;	blockAddr -> Y+7
;	*recvData -> Y+5
;	status -> R17
;	unLen -> Y+1
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0002 01C3     recvData[1] = blockAddr;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0002 01C4     mfrc522_calculateCRC(recvData,2, &recvData[2]);
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0002 01C5     status = mfrc522_to_card(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0002 01C6 
; 0002 01C7     //cek
; 0002 01C8 //    printf("read block #%d = %.2X %.4X\n", blockAddr, status, unLen);
; 0002 01C9 
; 0002 01CA     if ((status != CARD_FOUND) || (unLen != 0x90))
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0002 01CB     {
; 0002 01CC         status = ERROR;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0002 01CD     }
; 0002 01CE 
; 0002 01CF     return status;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0002 01D0 }
;PCODE: $00000371 VOL: 0
;
;/*
; * Function Name : MFRC522_SelectTag
; * Description: election card , read the card memory capacity
; * Input parameters : serNum - Incoming card serial number
; * Return value: the successful return of card capacity
; */
;uint8_t mfrc522_select_tag(uint8_t *serNum)
; 0002 01D9 {
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0002 01DA     uint8_t i;
; 0002 01DB 	uint8_t status;
; 0002 01DC 	uint8_t size;
; 0002 01DD     uint32_t recvBits;
; 0002 01DE     uint8_t buffer[9];
; 0002 01DF 
; 0002 01E0 	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0
; 0002 01E1 
; 0002 01E2     buffer[0] = PICC_SElECTTAG;
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;	*serNum -> Y+17
;	i -> R17
;	status -> R16
;	size -> R19
;	recvBits -> Y+13
;	buffer -> Y+4
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0002 01E3     buffer[1] = 0x70;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0002 01E4     for (i=0; i<5; i++)
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0002 01E5     {
; 0002 01E6     	buffer[i+2] = *(serNum+i);
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0002 01E7     }
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0002 01E8 	mfrc522_calculateCRC(buffer, 7, &buffer[7]);		//??
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0002 01E9     status = mfrc522_to_card(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0002 01EA 
; 0002 01EB     if ((status == CARD_FOUND) && (recvBits == 0x18))
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0002 01EC     {
; 0002 01ED 		size = buffer[0];
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0002 01EE 	}
; 0002 01EF     else
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0002 01F0     {
; 0002 01F1 		size = 0;
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0002 01F2 	}
;PCODE: $000003B7 VOL: 0
; 0002 01F3 
; 0002 01F4     return size;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0002 01F5 }
;PCODE: $000003BC VOL: 0
